# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import orchestrator_pb2 as orchestrator__pb2


class OrchestratorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddVertex = channel.stream_unary(
                '/orchestrator.Orchestrator/AddVertex',
                request_serializer=orchestrator__pb2.ApiVertex.SerializeToString,
                response_deserializer=orchestrator__pb2.ApiGraphSummary.FromString,
                )
        self.DeleteVertex = channel.stream_unary(
                '/orchestrator.Orchestrator/DeleteVertex',
                request_serializer=orchestrator__pb2.ApiVertex.SerializeToString,
                response_deserializer=orchestrator__pb2.ApiGraphSummary.FromString,
                )
        self.AddEdge = channel.stream_unary(
                '/orchestrator.Orchestrator/AddEdge',
                request_serializer=orchestrator__pb2.ApiEdge.SerializeToString,
                response_deserializer=orchestrator__pb2.ApiGraphSummary.FromString,
                )
        self.DeleteEdge = channel.stream_unary(
                '/orchestrator.Orchestrator/DeleteEdge',
                request_serializer=orchestrator__pb2.ApiEdge.SerializeToString,
                response_deserializer=orchestrator__pb2.ApiGraphSummary.FromString,
                )
        self.Search = channel.unary_unary(
                '/orchestrator.Orchestrator/Search',
                request_serializer=orchestrator__pb2.ApiSearchArgs.SerializeToString,
                response_deserializer=orchestrator__pb2.ApiSearchResults.FromString,
                )


class OrchestratorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddVertex(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteVertex(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddEdge(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteEdge(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrchestratorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddVertex': grpc.stream_unary_rpc_method_handler(
                    servicer.AddVertex,
                    request_deserializer=orchestrator__pb2.ApiVertex.FromString,
                    response_serializer=orchestrator__pb2.ApiGraphSummary.SerializeToString,
            ),
            'DeleteVertex': grpc.stream_unary_rpc_method_handler(
                    servicer.DeleteVertex,
                    request_deserializer=orchestrator__pb2.ApiVertex.FromString,
                    response_serializer=orchestrator__pb2.ApiGraphSummary.SerializeToString,
            ),
            'AddEdge': grpc.stream_unary_rpc_method_handler(
                    servicer.AddEdge,
                    request_deserializer=orchestrator__pb2.ApiEdge.FromString,
                    response_serializer=orchestrator__pb2.ApiGraphSummary.SerializeToString,
            ),
            'DeleteEdge': grpc.stream_unary_rpc_method_handler(
                    servicer.DeleteEdge,
                    request_deserializer=orchestrator__pb2.ApiEdge.FromString,
                    response_serializer=orchestrator__pb2.ApiGraphSummary.SerializeToString,
            ),
            'Search': grpc.unary_unary_rpc_method_handler(
                    servicer.Search,
                    request_deserializer=orchestrator__pb2.ApiSearchArgs.FromString,
                    response_serializer=orchestrator__pb2.ApiSearchResults.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'orchestrator.Orchestrator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Orchestrator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddVertex(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/orchestrator.Orchestrator/AddVertex',
            orchestrator__pb2.ApiVertex.SerializeToString,
            orchestrator__pb2.ApiGraphSummary.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteVertex(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/orchestrator.Orchestrator/DeleteVertex',
            orchestrator__pb2.ApiVertex.SerializeToString,
            orchestrator__pb2.ApiGraphSummary.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddEdge(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/orchestrator.Orchestrator/AddEdge',
            orchestrator__pb2.ApiEdge.SerializeToString,
            orchestrator__pb2.ApiGraphSummary.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteEdge(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/orchestrator.Orchestrator/DeleteEdge',
            orchestrator__pb2.ApiEdge.SerializeToString,
            orchestrator__pb2.ApiGraphSummary.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/orchestrator.Orchestrator/Search',
            orchestrator__pb2.ApiSearchArgs.SerializeToString,
            orchestrator__pb2.ApiSearchResults.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
