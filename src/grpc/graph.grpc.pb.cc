// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: graph.proto

#include "graph.pb.h"
#include "graph.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace graph {

static const char* Graph_method_names[] = {
  "/graph.Graph/AddHost",
  "/graph.Graph/AddVertex",
  "/graph.Graph/DeleteVertex",
  "/graph.Graph/AddEdge",
  "/graph.Graph/DeleteEdge",
  "/graph.Graph/Search",
  "/graph.Graph/Ping",
};

std::unique_ptr< Graph::Stub> Graph::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Graph::Stub> stub(new Graph::Stub(channel, options));
  return stub;
}

Graph::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_AddHost_(Graph_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddVertex_(Graph_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_DeleteVertex_(Graph_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_AddEdge_(Graph_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_DeleteEdge_(Graph_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_Search_(Graph_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Ping_(Graph_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Graph::Stub::AddHost(::grpc::ClientContext* context, const ::graph::Host& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::graph::Host, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddHost_, context, request, response);
}

void Graph::Stub::async::AddHost(::grpc::ClientContext* context, const ::graph::Host* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::graph::Host, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddHost_, context, request, response, std::move(f));
}

void Graph::Stub::async::AddHost(::grpc::ClientContext* context, const ::graph::Host* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddHost_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Graph::Stub::PrepareAsyncAddHostRaw(::grpc::ClientContext* context, const ::graph::Host& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::graph::Host, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddHost_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Graph::Stub::AsyncAddHostRaw(::grpc::ClientContext* context, const ::graph::Host& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddHostRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::graph::Vertex>* Graph::Stub::AddVertexRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response) {
  return ::grpc::internal::ClientWriterFactory< ::graph::Vertex>::Create(channel_.get(), rpcmethod_AddVertex_, context, response);
}

void Graph::Stub::async::AddVertex(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::ClientWriteReactor< ::graph::Vertex>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::graph::Vertex>::Create(stub_->channel_.get(), stub_->rpcmethod_AddVertex_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::graph::Vertex>* Graph::Stub::AsyncAddVertexRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::graph::Vertex>::Create(channel_.get(), cq, rpcmethod_AddVertex_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::graph::Vertex>* Graph::Stub::PrepareAsyncAddVertexRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::graph::Vertex>::Create(channel_.get(), cq, rpcmethod_AddVertex_, context, response, false, nullptr);
}

::grpc::ClientWriter< ::graph::Vertex>* Graph::Stub::DeleteVertexRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response) {
  return ::grpc::internal::ClientWriterFactory< ::graph::Vertex>::Create(channel_.get(), rpcmethod_DeleteVertex_, context, response);
}

void Graph::Stub::async::DeleteVertex(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::ClientWriteReactor< ::graph::Vertex>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::graph::Vertex>::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteVertex_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::graph::Vertex>* Graph::Stub::AsyncDeleteVertexRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::graph::Vertex>::Create(channel_.get(), cq, rpcmethod_DeleteVertex_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::graph::Vertex>* Graph::Stub::PrepareAsyncDeleteVertexRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::graph::Vertex>::Create(channel_.get(), cq, rpcmethod_DeleteVertex_, context, response, false, nullptr);
}

::grpc::ClientWriter< ::graph::Edge>* Graph::Stub::AddEdgeRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response) {
  return ::grpc::internal::ClientWriterFactory< ::graph::Edge>::Create(channel_.get(), rpcmethod_AddEdge_, context, response);
}

void Graph::Stub::async::AddEdge(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::ClientWriteReactor< ::graph::Edge>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::graph::Edge>::Create(stub_->channel_.get(), stub_->rpcmethod_AddEdge_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::graph::Edge>* Graph::Stub::AsyncAddEdgeRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::graph::Edge>::Create(channel_.get(), cq, rpcmethod_AddEdge_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::graph::Edge>* Graph::Stub::PrepareAsyncAddEdgeRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::graph::Edge>::Create(channel_.get(), cq, rpcmethod_AddEdge_, context, response, false, nullptr);
}

::grpc::ClientWriter< ::graph::Edge>* Graph::Stub::DeleteEdgeRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response) {
  return ::grpc::internal::ClientWriterFactory< ::graph::Edge>::Create(channel_.get(), rpcmethod_DeleteEdge_, context, response);
}

void Graph::Stub::async::DeleteEdge(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::ClientWriteReactor< ::graph::Edge>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::graph::Edge>::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteEdge_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::graph::Edge>* Graph::Stub::AsyncDeleteEdgeRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::graph::Edge>::Create(channel_.get(), cq, rpcmethod_DeleteEdge_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::graph::Edge>* Graph::Stub::PrepareAsyncDeleteEdgeRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::graph::Edge>::Create(channel_.get(), cq, rpcmethod_DeleteEdge_, context, response, false, nullptr);
}

::grpc::Status Graph::Stub::Search(::grpc::ClientContext* context, const ::graph::SearchArgs& request, ::graph::SearchResults* response) {
  return ::grpc::internal::BlockingUnaryCall< ::graph::SearchArgs, ::graph::SearchResults, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Search_, context, request, response);
}

void Graph::Stub::async::Search(::grpc::ClientContext* context, const ::graph::SearchArgs* request, ::graph::SearchResults* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::graph::SearchArgs, ::graph::SearchResults, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, response, std::move(f));
}

void Graph::Stub::async::Search(::grpc::ClientContext* context, const ::graph::SearchArgs* request, ::graph::SearchResults* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::graph::SearchResults>* Graph::Stub::PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::graph::SearchArgs& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::graph::SearchResults, ::graph::SearchArgs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Search_, context, request);
}

::grpc::ClientAsyncResponseReader< ::graph::SearchResults>* Graph::Stub::AsyncSearchRaw(::grpc::ClientContext* context, const ::graph::SearchArgs& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSearchRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Graph::Stub::Ping(::grpc::ClientContext* context, const ::graph::PingRequest& request, ::graph::PingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::graph::PingRequest, ::graph::PingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Ping_, context, request, response);
}

void Graph::Stub::async::Ping(::grpc::ClientContext* context, const ::graph::PingRequest* request, ::graph::PingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::graph::PingRequest, ::graph::PingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, std::move(f));
}

void Graph::Stub::async::Ping(::grpc::ClientContext* context, const ::graph::PingRequest* request, ::graph::PingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::graph::PingResponse>* Graph::Stub::PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::graph::PingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::graph::PingResponse, ::graph::PingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Ping_, context, request);
}

::grpc::ClientAsyncResponseReader< ::graph::PingResponse>* Graph::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::graph::PingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPingRaw(context, request, cq);
  result->StartCall();
  return result;
}

Graph::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Graph_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Graph::Service, ::graph::Host, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Graph::Service* service,
             ::grpc::ServerContext* ctx,
             const ::graph::Host* req,
             ::google::protobuf::Empty* resp) {
               return service->AddHost(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Graph_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Graph::Service, ::graph::Vertex, ::graph::GraphSummary>(
          [](Graph::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::graph::Vertex>* reader,
             ::graph::GraphSummary* resp) {
               return service->AddVertex(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Graph_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Graph::Service, ::graph::Vertex, ::graph::GraphSummary>(
          [](Graph::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::graph::Vertex>* reader,
             ::graph::GraphSummary* resp) {
               return service->DeleteVertex(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Graph_method_names[3],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Graph::Service, ::graph::Edge, ::graph::GraphSummary>(
          [](Graph::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::graph::Edge>* reader,
             ::graph::GraphSummary* resp) {
               return service->AddEdge(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Graph_method_names[4],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Graph::Service, ::graph::Edge, ::graph::GraphSummary>(
          [](Graph::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::graph::Edge>* reader,
             ::graph::GraphSummary* resp) {
               return service->DeleteEdge(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Graph_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Graph::Service, ::graph::SearchArgs, ::graph::SearchResults, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Graph::Service* service,
             ::grpc::ServerContext* ctx,
             const ::graph::SearchArgs* req,
             ::graph::SearchResults* resp) {
               return service->Search(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Graph_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Graph::Service, ::graph::PingRequest, ::graph::PingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Graph::Service* service,
             ::grpc::ServerContext* ctx,
             const ::graph::PingRequest* req,
             ::graph::PingResponse* resp) {
               return service->Ping(ctx, req, resp);
             }, this)));
}

Graph::Service::~Service() {
}

::grpc::Status Graph::Service::AddHost(::grpc::ServerContext* context, const ::graph::Host* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Graph::Service::AddVertex(::grpc::ServerContext* context, ::grpc::ServerReader< ::graph::Vertex>* reader, ::graph::GraphSummary* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Graph::Service::DeleteVertex(::grpc::ServerContext* context, ::grpc::ServerReader< ::graph::Vertex>* reader, ::graph::GraphSummary* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Graph::Service::AddEdge(::grpc::ServerContext* context, ::grpc::ServerReader< ::graph::Edge>* reader, ::graph::GraphSummary* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Graph::Service::DeleteEdge(::grpc::ServerContext* context, ::grpc::ServerReader< ::graph::Edge>* reader, ::graph::GraphSummary* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Graph::Service::Search(::grpc::ServerContext* context, const ::graph::SearchArgs* request, ::graph::SearchResults* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Graph::Service::Ping(::grpc::ServerContext* context, const ::graph::PingRequest* request, ::graph::PingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace graph

