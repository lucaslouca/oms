// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: graph.proto
#ifndef GRPC_graph_2eproto__INCLUDED
#define GRPC_graph_2eproto__INCLUDED

#include "graph.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace graph {

class Graph final {
 public:
  static constexpr char const* service_full_name() {
    return "graph.Graph";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status AddHost(::grpc::ClientContext* context, const ::graph::Host& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncAddHost(::grpc::ClientContext* context, const ::graph::Host& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncAddHostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncAddHost(::grpc::ClientContext* context, const ::graph::Host& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncAddHostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::graph::Vertex>> AddVertex(::grpc::ClientContext* context, ::graph::GraphSummary* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::graph::Vertex>>(AddVertexRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::graph::Vertex>> AsyncAddVertex(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::graph::Vertex>>(AsyncAddVertexRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::graph::Vertex>> PrepareAsyncAddVertex(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::graph::Vertex>>(PrepareAsyncAddVertexRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::graph::Vertex>> DeleteVertex(::grpc::ClientContext* context, ::graph::GraphSummary* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::graph::Vertex>>(DeleteVertexRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::graph::Vertex>> AsyncDeleteVertex(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::graph::Vertex>>(AsyncDeleteVertexRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::graph::Vertex>> PrepareAsyncDeleteVertex(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::graph::Vertex>>(PrepareAsyncDeleteVertexRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::graph::Edge>> AddEdge(::grpc::ClientContext* context, ::graph::GraphSummary* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::graph::Edge>>(AddEdgeRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::graph::Edge>> AsyncAddEdge(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::graph::Edge>>(AsyncAddEdgeRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::graph::Edge>> PrepareAsyncAddEdge(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::graph::Edge>>(PrepareAsyncAddEdgeRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::graph::Edge>> DeleteEdge(::grpc::ClientContext* context, ::graph::GraphSummary* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::graph::Edge>>(DeleteEdgeRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::graph::Edge>> AsyncDeleteEdge(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::graph::Edge>>(AsyncDeleteEdgeRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::graph::Edge>> PrepareAsyncDeleteEdge(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::graph::Edge>>(PrepareAsyncDeleteEdgeRaw(context, response, cq));
    }
    virtual ::grpc::Status Search(::grpc::ClientContext* context, const ::graph::SearchArgs& request, ::graph::SearchResults* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::graph::SearchResults>> AsyncSearch(::grpc::ClientContext* context, const ::graph::SearchArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::graph::SearchResults>>(AsyncSearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::graph::SearchResults>> PrepareAsyncSearch(::grpc::ClientContext* context, const ::graph::SearchArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::graph::SearchResults>>(PrepareAsyncSearchRaw(context, request, cq));
    }
    virtual ::grpc::Status Ping(::grpc::ClientContext* context, const ::graph::PingRequest& request, ::graph::PingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::graph::PingResponse>> AsyncPing(::grpc::ClientContext* context, const ::graph::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::graph::PingResponse>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::graph::PingResponse>> PrepareAsyncPing(::grpc::ClientContext* context, const ::graph::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::graph::PingResponse>>(PrepareAsyncPingRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void AddHost(::grpc::ClientContext* context, const ::graph::Host* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddHost(::grpc::ClientContext* context, const ::graph::Host* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddVertex(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::ClientWriteReactor< ::graph::Vertex>* reactor) = 0;
      virtual void DeleteVertex(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::ClientWriteReactor< ::graph::Vertex>* reactor) = 0;
      virtual void AddEdge(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::ClientWriteReactor< ::graph::Edge>* reactor) = 0;
      virtual void DeleteEdge(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::ClientWriteReactor< ::graph::Edge>* reactor) = 0;
      virtual void Search(::grpc::ClientContext* context, const ::graph::SearchArgs* request, ::graph::SearchResults* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Search(::grpc::ClientContext* context, const ::graph::SearchArgs* request, ::graph::SearchResults* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Ping(::grpc::ClientContext* context, const ::graph::PingRequest* request, ::graph::PingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Ping(::grpc::ClientContext* context, const ::graph::PingRequest* request, ::graph::PingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncAddHostRaw(::grpc::ClientContext* context, const ::graph::Host& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncAddHostRaw(::grpc::ClientContext* context, const ::graph::Host& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::graph::Vertex>* AddVertexRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::graph::Vertex>* AsyncAddVertexRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::graph::Vertex>* PrepareAsyncAddVertexRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::graph::Vertex>* DeleteVertexRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::graph::Vertex>* AsyncDeleteVertexRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::graph::Vertex>* PrepareAsyncDeleteVertexRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::graph::Edge>* AddEdgeRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::graph::Edge>* AsyncAddEdgeRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::graph::Edge>* PrepareAsyncAddEdgeRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::graph::Edge>* DeleteEdgeRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::graph::Edge>* AsyncDeleteEdgeRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::graph::Edge>* PrepareAsyncDeleteEdgeRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::graph::SearchResults>* AsyncSearchRaw(::grpc::ClientContext* context, const ::graph::SearchArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::graph::SearchResults>* PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::graph::SearchArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::graph::PingResponse>* AsyncPingRaw(::grpc::ClientContext* context, const ::graph::PingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::graph::PingResponse>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::graph::PingRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status AddHost(::grpc::ClientContext* context, const ::graph::Host& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncAddHost(::grpc::ClientContext* context, const ::graph::Host& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncAddHostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncAddHost(::grpc::ClientContext* context, const ::graph::Host& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncAddHostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::graph::Vertex>> AddVertex(::grpc::ClientContext* context, ::graph::GraphSummary* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::graph::Vertex>>(AddVertexRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::graph::Vertex>> AsyncAddVertex(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::graph::Vertex>>(AsyncAddVertexRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::graph::Vertex>> PrepareAsyncAddVertex(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::graph::Vertex>>(PrepareAsyncAddVertexRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::graph::Vertex>> DeleteVertex(::grpc::ClientContext* context, ::graph::GraphSummary* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::graph::Vertex>>(DeleteVertexRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::graph::Vertex>> AsyncDeleteVertex(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::graph::Vertex>>(AsyncDeleteVertexRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::graph::Vertex>> PrepareAsyncDeleteVertex(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::graph::Vertex>>(PrepareAsyncDeleteVertexRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::graph::Edge>> AddEdge(::grpc::ClientContext* context, ::graph::GraphSummary* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::graph::Edge>>(AddEdgeRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::graph::Edge>> AsyncAddEdge(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::graph::Edge>>(AsyncAddEdgeRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::graph::Edge>> PrepareAsyncAddEdge(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::graph::Edge>>(PrepareAsyncAddEdgeRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::graph::Edge>> DeleteEdge(::grpc::ClientContext* context, ::graph::GraphSummary* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::graph::Edge>>(DeleteEdgeRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::graph::Edge>> AsyncDeleteEdge(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::graph::Edge>>(AsyncDeleteEdgeRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::graph::Edge>> PrepareAsyncDeleteEdge(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::graph::Edge>>(PrepareAsyncDeleteEdgeRaw(context, response, cq));
    }
    ::grpc::Status Search(::grpc::ClientContext* context, const ::graph::SearchArgs& request, ::graph::SearchResults* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::graph::SearchResults>> AsyncSearch(::grpc::ClientContext* context, const ::graph::SearchArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::graph::SearchResults>>(AsyncSearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::graph::SearchResults>> PrepareAsyncSearch(::grpc::ClientContext* context, const ::graph::SearchArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::graph::SearchResults>>(PrepareAsyncSearchRaw(context, request, cq));
    }
    ::grpc::Status Ping(::grpc::ClientContext* context, const ::graph::PingRequest& request, ::graph::PingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::graph::PingResponse>> AsyncPing(::grpc::ClientContext* context, const ::graph::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::graph::PingResponse>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::graph::PingResponse>> PrepareAsyncPing(::grpc::ClientContext* context, const ::graph::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::graph::PingResponse>>(PrepareAsyncPingRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AddHost(::grpc::ClientContext* context, const ::graph::Host* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void AddHost(::grpc::ClientContext* context, const ::graph::Host* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddVertex(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::ClientWriteReactor< ::graph::Vertex>* reactor) override;
      void DeleteVertex(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::ClientWriteReactor< ::graph::Vertex>* reactor) override;
      void AddEdge(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::ClientWriteReactor< ::graph::Edge>* reactor) override;
      void DeleteEdge(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::ClientWriteReactor< ::graph::Edge>* reactor) override;
      void Search(::grpc::ClientContext* context, const ::graph::SearchArgs* request, ::graph::SearchResults* response, std::function<void(::grpc::Status)>) override;
      void Search(::grpc::ClientContext* context, const ::graph::SearchArgs* request, ::graph::SearchResults* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Ping(::grpc::ClientContext* context, const ::graph::PingRequest* request, ::graph::PingResponse* response, std::function<void(::grpc::Status)>) override;
      void Ping(::grpc::ClientContext* context, const ::graph::PingRequest* request, ::graph::PingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncAddHostRaw(::grpc::ClientContext* context, const ::graph::Host& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncAddHostRaw(::grpc::ClientContext* context, const ::graph::Host& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::graph::Vertex>* AddVertexRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response) override;
    ::grpc::ClientAsyncWriter< ::graph::Vertex>* AsyncAddVertexRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::graph::Vertex>* PrepareAsyncAddVertexRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::graph::Vertex>* DeleteVertexRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response) override;
    ::grpc::ClientAsyncWriter< ::graph::Vertex>* AsyncDeleteVertexRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::graph::Vertex>* PrepareAsyncDeleteVertexRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::graph::Edge>* AddEdgeRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response) override;
    ::grpc::ClientAsyncWriter< ::graph::Edge>* AsyncAddEdgeRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::graph::Edge>* PrepareAsyncAddEdgeRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::graph::Edge>* DeleteEdgeRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response) override;
    ::grpc::ClientAsyncWriter< ::graph::Edge>* AsyncDeleteEdgeRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::graph::Edge>* PrepareAsyncDeleteEdgeRaw(::grpc::ClientContext* context, ::graph::GraphSummary* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::graph::SearchResults>* AsyncSearchRaw(::grpc::ClientContext* context, const ::graph::SearchArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::graph::SearchResults>* PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::graph::SearchArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::graph::PingResponse>* AsyncPingRaw(::grpc::ClientContext* context, const ::graph::PingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::graph::PingResponse>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::graph::PingRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AddHost_;
    const ::grpc::internal::RpcMethod rpcmethod_AddVertex_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteVertex_;
    const ::grpc::internal::RpcMethod rpcmethod_AddEdge_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteEdge_;
    const ::grpc::internal::RpcMethod rpcmethod_Search_;
    const ::grpc::internal::RpcMethod rpcmethod_Ping_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AddHost(::grpc::ServerContext* context, const ::graph::Host* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status AddVertex(::grpc::ServerContext* context, ::grpc::ServerReader< ::graph::Vertex>* reader, ::graph::GraphSummary* response);
    virtual ::grpc::Status DeleteVertex(::grpc::ServerContext* context, ::grpc::ServerReader< ::graph::Vertex>* reader, ::graph::GraphSummary* response);
    virtual ::grpc::Status AddEdge(::grpc::ServerContext* context, ::grpc::ServerReader< ::graph::Edge>* reader, ::graph::GraphSummary* response);
    virtual ::grpc::Status DeleteEdge(::grpc::ServerContext* context, ::grpc::ServerReader< ::graph::Edge>* reader, ::graph::GraphSummary* response);
    virtual ::grpc::Status Search(::grpc::ServerContext* context, const ::graph::SearchArgs* request, ::graph::SearchResults* response);
    virtual ::grpc::Status Ping(::grpc::ServerContext* context, const ::graph::PingRequest* request, ::graph::PingResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AddHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddHost() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AddHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddHost(::grpc::ServerContext* /*context*/, const ::graph::Host* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddHost(::grpc::ServerContext* context, ::graph::Host* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddVertex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddVertex() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AddVertex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddVertex(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::graph::Vertex>* /*reader*/, ::graph::GraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddVertex(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::graph::GraphSummary, ::graph::Vertex>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteVertex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteVertex() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteVertex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVertex(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::graph::Vertex>* /*reader*/, ::graph::GraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteVertex(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::graph::GraphSummary, ::graph::Vertex>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddEdge() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_AddEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEdge(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::graph::Edge>* /*reader*/, ::graph::GraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddEdge(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::graph::GraphSummary, ::graph::Edge>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(3, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteEdge() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEdge(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::graph::Edge>* /*reader*/, ::graph::GraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteEdge(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::graph::GraphSummary, ::graph::Edge>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(4, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Search() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::graph::SearchArgs* /*request*/, ::graph::SearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearch(::grpc::ServerContext* context, ::graph::SearchArgs* request, ::grpc::ServerAsyncResponseWriter< ::graph::SearchResults>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Ping() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::graph::PingRequest* /*request*/, ::graph::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::graph::PingRequest* request, ::grpc::ServerAsyncResponseWriter< ::graph::PingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AddHost<WithAsyncMethod_AddVertex<WithAsyncMethod_DeleteVertex<WithAsyncMethod_AddEdge<WithAsyncMethod_DeleteEdge<WithAsyncMethod_Search<WithAsyncMethod_Ping<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AddHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddHost() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::graph::Host, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::graph::Host* request, ::google::protobuf::Empty* response) { return this->AddHost(context, request, response); }));}
    void SetMessageAllocatorFor_AddHost(
        ::grpc::MessageAllocator< ::graph::Host, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::graph::Host, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddHost(::grpc::ServerContext* /*context*/, const ::graph::Host* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddHost(
      ::grpc::CallbackServerContext* /*context*/, const ::graph::Host* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddVertex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddVertex() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::graph::Vertex, ::graph::GraphSummary>(
            [this](
                   ::grpc::CallbackServerContext* context, ::graph::GraphSummary* response) { return this->AddVertex(context, response); }));
    }
    ~WithCallbackMethod_AddVertex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddVertex(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::graph::Vertex>* /*reader*/, ::graph::GraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::graph::Vertex>* AddVertex(
      ::grpc::CallbackServerContext* /*context*/, ::graph::GraphSummary* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteVertex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteVertex() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::graph::Vertex, ::graph::GraphSummary>(
            [this](
                   ::grpc::CallbackServerContext* context, ::graph::GraphSummary* response) { return this->DeleteVertex(context, response); }));
    }
    ~WithCallbackMethod_DeleteVertex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVertex(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::graph::Vertex>* /*reader*/, ::graph::GraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::graph::Vertex>* DeleteVertex(
      ::grpc::CallbackServerContext* /*context*/, ::graph::GraphSummary* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddEdge() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackClientStreamingHandler< ::graph::Edge, ::graph::GraphSummary>(
            [this](
                   ::grpc::CallbackServerContext* context, ::graph::GraphSummary* response) { return this->AddEdge(context, response); }));
    }
    ~WithCallbackMethod_AddEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEdge(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::graph::Edge>* /*reader*/, ::graph::GraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::graph::Edge>* AddEdge(
      ::grpc::CallbackServerContext* /*context*/, ::graph::GraphSummary* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteEdge() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackClientStreamingHandler< ::graph::Edge, ::graph::GraphSummary>(
            [this](
                   ::grpc::CallbackServerContext* context, ::graph::GraphSummary* response) { return this->DeleteEdge(context, response); }));
    }
    ~WithCallbackMethod_DeleteEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEdge(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::graph::Edge>* /*reader*/, ::graph::GraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::graph::Edge>* DeleteEdge(
      ::grpc::CallbackServerContext* /*context*/, ::graph::GraphSummary* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Search() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::graph::SearchArgs, ::graph::SearchResults>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::graph::SearchArgs* request, ::graph::SearchResults* response) { return this->Search(context, request, response); }));}
    void SetMessageAllocatorFor_Search(
        ::grpc::MessageAllocator< ::graph::SearchArgs, ::graph::SearchResults>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::graph::SearchArgs, ::graph::SearchResults>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::graph::SearchArgs* /*request*/, ::graph::SearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Search(
      ::grpc::CallbackServerContext* /*context*/, const ::graph::SearchArgs* /*request*/, ::graph::SearchResults* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Ping() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::graph::PingRequest, ::graph::PingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::graph::PingRequest* request, ::graph::PingResponse* response) { return this->Ping(context, request, response); }));}
    void SetMessageAllocatorFor_Ping(
        ::grpc::MessageAllocator< ::graph::PingRequest, ::graph::PingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::graph::PingRequest, ::graph::PingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::graph::PingRequest* /*request*/, ::graph::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Ping(
      ::grpc::CallbackServerContext* /*context*/, const ::graph::PingRequest* /*request*/, ::graph::PingResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AddHost<WithCallbackMethod_AddVertex<WithCallbackMethod_DeleteVertex<WithCallbackMethod_AddEdge<WithCallbackMethod_DeleteEdge<WithCallbackMethod_Search<WithCallbackMethod_Ping<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AddHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddHost() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AddHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddHost(::grpc::ServerContext* /*context*/, const ::graph::Host* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddVertex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddVertex() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AddVertex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddVertex(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::graph::Vertex>* /*reader*/, ::graph::GraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteVertex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteVertex() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteVertex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVertex(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::graph::Vertex>* /*reader*/, ::graph::GraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddEdge() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_AddEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEdge(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::graph::Edge>* /*reader*/, ::graph::GraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteEdge() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEdge(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::graph::Edge>* /*reader*/, ::graph::GraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Search() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::graph::SearchArgs* /*request*/, ::graph::SearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Ping() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::graph::PingRequest* /*request*/, ::graph::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddHost() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AddHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddHost(::grpc::ServerContext* /*context*/, const ::graph::Host* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddHost(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddVertex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddVertex() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AddVertex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddVertex(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::graph::Vertex>* /*reader*/, ::graph::GraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddVertex(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteVertex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteVertex() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteVertex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVertex(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::graph::Vertex>* /*reader*/, ::graph::GraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteVertex(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddEdge() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_AddEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEdge(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::graph::Edge>* /*reader*/, ::graph::GraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddEdge(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(3, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteEdge() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEdge(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::graph::Edge>* /*reader*/, ::graph::GraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteEdge(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(4, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Search() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::graph::SearchArgs* /*request*/, ::graph::SearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Ping() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::graph::PingRequest* /*request*/, ::graph::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddHost() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddHost(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddHost(::grpc::ServerContext* /*context*/, const ::graph::Host* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddHost(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddVertex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddVertex() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->AddVertex(context, response); }));
    }
    ~WithRawCallbackMethod_AddVertex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddVertex(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::graph::Vertex>* /*reader*/, ::graph::GraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* AddVertex(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteVertex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteVertex() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->DeleteVertex(context, response); }));
    }
    ~WithRawCallbackMethod_DeleteVertex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVertex(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::graph::Vertex>* /*reader*/, ::graph::GraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* DeleteVertex(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddEdge() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->AddEdge(context, response); }));
    }
    ~WithRawCallbackMethod_AddEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEdge(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::graph::Edge>* /*reader*/, ::graph::GraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* AddEdge(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteEdge() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->DeleteEdge(context, response); }));
    }
    ~WithRawCallbackMethod_DeleteEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEdge(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::graph::Edge>* /*reader*/, ::graph::GraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* DeleteEdge(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Search() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Search(context, request, response); }));
    }
    ~WithRawCallbackMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::graph::SearchArgs* /*request*/, ::graph::SearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Search(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Ping() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Ping(context, request, response); }));
    }
    ~WithRawCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::graph::PingRequest* /*request*/, ::graph::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Ping(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddHost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddHost() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::graph::Host, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::graph::Host, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedAddHost(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddHost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddHost(::grpc::ServerContext* /*context*/, const ::graph::Host* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddHost(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::graph::Host,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Search() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::graph::SearchArgs, ::graph::SearchResults>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::graph::SearchArgs, ::graph::SearchResults>* streamer) {
                       return this->StreamedSearch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::graph::SearchArgs* /*request*/, ::graph::SearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::graph::SearchArgs,::graph::SearchResults>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Ping() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::graph::PingRequest, ::graph::PingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::graph::PingRequest, ::graph::PingResponse>* streamer) {
                       return this->StreamedPing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::graph::PingRequest* /*request*/, ::graph::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::graph::PingRequest,::graph::PingResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AddHost<WithStreamedUnaryMethod_Search<WithStreamedUnaryMethod_Ping<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AddHost<WithStreamedUnaryMethod_Search<WithStreamedUnaryMethod_Ping<Service > > > StreamedService;
};

}  // namespace graph


#endif  // GRPC_graph_2eproto__INCLUDED
