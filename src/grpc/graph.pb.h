// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_graph_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_graph_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/empty.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_graph_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_graph_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_graph_2eproto;
namespace graph {
class Edge;
struct EdgeDefaultTypeInternal;
extern EdgeDefaultTypeInternal _Edge_default_instance_;
class GraphSummary;
struct GraphSummaryDefaultTypeInternal;
extern GraphSummaryDefaultTypeInternal _GraphSummary_default_instance_;
class Host;
struct HostDefaultTypeInternal;
extern HostDefaultTypeInternal _Host_default_instance_;
class PingRequest;
struct PingRequestDefaultTypeInternal;
extern PingRequestDefaultTypeInternal _PingRequest_default_instance_;
class PingResponse;
struct PingResponseDefaultTypeInternal;
extern PingResponseDefaultTypeInternal _PingResponse_default_instance_;
class SearchArgs;
struct SearchArgsDefaultTypeInternal;
extern SearchArgsDefaultTypeInternal _SearchArgs_default_instance_;
class SearchResults;
struct SearchResultsDefaultTypeInternal;
extern SearchResultsDefaultTypeInternal _SearchResults_default_instance_;
class Vertex;
struct VertexDefaultTypeInternal;
extern VertexDefaultTypeInternal _Vertex_default_instance_;
}  // namespace graph
PROTOBUF_NAMESPACE_OPEN
template <>
::graph::Edge* Arena::CreateMaybeMessage<::graph::Edge>(Arena*);
template <>
::graph::GraphSummary* Arena::CreateMaybeMessage<::graph::GraphSummary>(Arena*);
template <>
::graph::Host* Arena::CreateMaybeMessage<::graph::Host>(Arena*);
template <>
::graph::PingRequest* Arena::CreateMaybeMessage<::graph::PingRequest>(Arena*);
template <>
::graph::PingResponse* Arena::CreateMaybeMessage<::graph::PingResponse>(Arena*);
template <>
::graph::SearchArgs* Arena::CreateMaybeMessage<::graph::SearchArgs>(Arena*);
template <>
::graph::SearchResults* Arena::CreateMaybeMessage<::graph::SearchResults>(Arena*);
template <>
::graph::Vertex* Arena::CreateMaybeMessage<::graph::Vertex>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace graph {

// ===================================================================


// -------------------------------------------------------------------

class Host final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph.Host) */ {
 public:
  inline Host() : Host(nullptr) {}
  ~Host() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Host(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Host(const Host& from);
  Host(Host&& from) noexcept
    : Host() {
    *this = ::std::move(from);
  }

  inline Host& operator=(const Host& from) {
    CopyFrom(from);
    return *this;
  }
  inline Host& operator=(Host&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Host& default_instance() {
    return *internal_default_instance();
  }
  static inline const Host* internal_default_instance() {
    return reinterpret_cast<const Host*>(
               &_Host_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Host& a, Host& b) {
    a.Swap(&b);
  }
  inline void Swap(Host* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Host* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Host* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Host>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Host& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Host& from) {
    Host::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Host* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "graph.Host";
  }
  protected:
  explicit Host(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kAddressFieldNumber = 2,
  };
  // string key = 1;
  void clear_key() ;
  const std::string& key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* ptr);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // string address = 2;
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // @@protoc_insertion_point(class_scope:graph.Host)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};// -------------------------------------------------------------------

class Vertex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph.Vertex) */ {
 public:
  inline Vertex() : Vertex(nullptr) {}
  ~Vertex() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Vertex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vertex(const Vertex& from);
  Vertex(Vertex&& from) noexcept
    : Vertex() {
    *this = ::std::move(from);
  }

  inline Vertex& operator=(const Vertex& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vertex& operator=(Vertex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vertex& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vertex* internal_default_instance() {
    return reinterpret_cast<const Vertex*>(
               &_Vertex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vertex& a, Vertex& b) {
    a.Swap(&b);
  }
  inline void Swap(Vertex* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vertex* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vertex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vertex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vertex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vertex& from) {
    Vertex::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vertex* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "graph.Vertex";
  }
  protected:
  explicit Vertex(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key() ;
  const std::string& key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* ptr);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // string value = 2;
  void clear_value() ;
  const std::string& value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* ptr);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:graph.Vertex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};// -------------------------------------------------------------------

class Edge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph.Edge) */ {
 public:
  inline Edge() : Edge(nullptr) {}
  ~Edge() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Edge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Edge(const Edge& from);
  Edge(Edge&& from) noexcept
    : Edge() {
    *this = ::std::move(from);
  }

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge& operator=(Edge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Edge& default_instance() {
    return *internal_default_instance();
  }
  static inline const Edge* internal_default_instance() {
    return reinterpret_cast<const Edge*>(
               &_Edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Edge& a, Edge& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Edge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Edge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Edge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Edge& from) {
    Edge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "graph.Edge";
  }
  protected:
  explicit Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kLabelFieldNumber = 3,
    kLookupFromFieldNumber = 4,
    kLookupToFieldNumber = 5,
    kKeyFieldNumber = 6,
  };
  // string from = 1;
  void clear_from() ;
  const std::string& from() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_from(Arg_&& arg, Args_... args);
  std::string* mutable_from();
  PROTOBUF_NODISCARD std::string* release_from();
  void set_allocated_from(std::string* ptr);

  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(
      const std::string& value);
  std::string* _internal_mutable_from();

  public:
  // string to = 2;
  void clear_to() ;
  const std::string& to() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_to(Arg_&& arg, Args_... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* ptr);

  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(
      const std::string& value);
  std::string* _internal_mutable_to();

  public:
  // string label = 3;
  void clear_label() ;
  const std::string& label() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_label(Arg_&& arg, Args_... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* ptr);

  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(
      const std::string& value);
  std::string* _internal_mutable_label();

  public:
  // string lookup_from = 4;
  void clear_lookup_from() ;
  const std::string& lookup_from() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lookup_from(Arg_&& arg, Args_... args);
  std::string* mutable_lookup_from();
  PROTOBUF_NODISCARD std::string* release_lookup_from();
  void set_allocated_lookup_from(std::string* ptr);

  private:
  const std::string& _internal_lookup_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lookup_from(
      const std::string& value);
  std::string* _internal_mutable_lookup_from();

  public:
  // string lookup_to = 5;
  void clear_lookup_to() ;
  const std::string& lookup_to() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lookup_to(Arg_&& arg, Args_... args);
  std::string* mutable_lookup_to();
  PROTOBUF_NODISCARD std::string* release_lookup_to();
  void set_allocated_lookup_to(std::string* ptr);

  private:
  const std::string& _internal_lookup_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lookup_to(
      const std::string& value);
  std::string* _internal_mutable_lookup_to();

  public:
  // string key = 6;
  void clear_key() ;
  const std::string& key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* ptr);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // @@protoc_insertion_point(class_scope:graph.Edge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lookup_from_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lookup_to_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};// -------------------------------------------------------------------

class GraphSummary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph.GraphSummary) */ {
 public:
  inline GraphSummary() : GraphSummary(nullptr) {}
  ~GraphSummary() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GraphSummary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GraphSummary(const GraphSummary& from);
  GraphSummary(GraphSummary&& from) noexcept
    : GraphSummary() {
    *this = ::std::move(from);
  }

  inline GraphSummary& operator=(const GraphSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphSummary& operator=(GraphSummary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GraphSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const GraphSummary* internal_default_instance() {
    return reinterpret_cast<const GraphSummary*>(
               &_GraphSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GraphSummary& a, GraphSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphSummary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphSummary* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GraphSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GraphSummary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GraphSummary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GraphSummary& from) {
    GraphSummary::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphSummary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "graph.GraphSummary";
  }
  protected:
  explicit GraphSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVertexCountFieldNumber = 1,
    kEdgeCountFieldNumber = 2,
  };
  // int32 vertex_count = 1;
  void clear_vertex_count() ;
  ::int32_t vertex_count() const;
  void set_vertex_count(::int32_t value);

  private:
  ::int32_t _internal_vertex_count() const;
  void _internal_set_vertex_count(::int32_t value);

  public:
  // int32 edge_count = 2;
  void clear_edge_count() ;
  ::int32_t edge_count() const;
  void set_edge_count(::int32_t value);

  private:
  ::int32_t _internal_edge_count() const;
  void _internal_set_edge_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:graph.GraphSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t vertex_count_;
    ::int32_t edge_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};// -------------------------------------------------------------------

class SearchArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph.SearchArgs) */ {
 public:
  inline SearchArgs() : SearchArgs(nullptr) {}
  ~SearchArgs() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SearchArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchArgs(const SearchArgs& from);
  SearchArgs(SearchArgs&& from) noexcept
    : SearchArgs() {
    *this = ::std::move(from);
  }

  inline SearchArgs& operator=(const SearchArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchArgs& operator=(SearchArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchArgs* internal_default_instance() {
    return reinterpret_cast<const SearchArgs*>(
               &_SearchArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SearchArgs& a, SearchArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchArgs* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchArgs& from) {
    SearchArgs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchArgs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "graph.SearchArgs";
  }
  protected:
  explicit SearchArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 3,
    kEdgesFieldNumber = 4,
    kIdsSoFarFieldNumber = 5,
    kStartKeyFieldNumber = 1,
    kLevelFieldNumber = 2,
  };
  // repeated .graph.Vertex vertices = 3;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;

  public:
  void clear_vertices() ;
  ::graph::Vertex* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph::Vertex >*
      mutable_vertices();
  private:
  const ::graph::Vertex& _internal_vertices(int index) const;
  ::graph::Vertex* _internal_add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::graph::Vertex>& _internal_vertices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::graph::Vertex>* _internal_mutable_vertices();
  public:
  const ::graph::Vertex& vertices(int index) const;
  ::graph::Vertex* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph::Vertex >&
      vertices() const;
  // repeated .graph.Edge edges = 4;
  int edges_size() const;
  private:
  int _internal_edges_size() const;

  public:
  void clear_edges() ;
  ::graph::Edge* mutable_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph::Edge >*
      mutable_edges();
  private:
  const ::graph::Edge& _internal_edges(int index) const;
  ::graph::Edge* _internal_add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::graph::Edge>& _internal_edges() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::graph::Edge>* _internal_mutable_edges();
  public:
  const ::graph::Edge& edges(int index) const;
  ::graph::Edge* add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph::Edge >&
      edges() const;
  // repeated string ids_so_far = 5;
  int ids_so_far_size() const;
  private:
  int _internal_ids_so_far_size() const;

  public:
  void clear_ids_so_far() ;
  const std::string& ids_so_far(int index) const;
  std::string* mutable_ids_so_far(int index);
  void set_ids_so_far(int index, const std::string& value);
  void set_ids_so_far(int index, std::string&& value);
  void set_ids_so_far(int index, const char* value);
  void set_ids_so_far(int index, const char* value, std::size_t size);
  void set_ids_so_far(int index, absl::string_view value);
  std::string* add_ids_so_far();
  void add_ids_so_far(const std::string& value);
  void add_ids_so_far(std::string&& value);
  void add_ids_so_far(const char* value);
  void add_ids_so_far(const char* value, std::size_t size);
  void add_ids_so_far(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids_so_far() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids_so_far();

  private:
  const std::string& _internal_ids_so_far(int index) const;
  std::string* _internal_add_ids_so_far();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_ids_so_far() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_ids_so_far();

  public:
  // string start_key = 1;
  void clear_start_key() ;
  const std::string& start_key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_start_key(Arg_&& arg, Args_... args);
  std::string* mutable_start_key();
  PROTOBUF_NODISCARD std::string* release_start_key();
  void set_allocated_start_key(std::string* ptr);

  private:
  const std::string& _internal_start_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_key(
      const std::string& value);
  std::string* _internal_mutable_start_key();

  public:
  // int32 level = 2;
  void clear_level() ;
  ::int32_t level() const;
  void set_level(::int32_t value);

  private:
  ::int32_t _internal_level() const;
  void _internal_set_level(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:graph.SearchArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph::Vertex > vertices_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph::Edge > edges_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_so_far_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_key_;
    ::int32_t level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};// -------------------------------------------------------------------

class SearchResults final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph.SearchResults) */ {
 public:
  inline SearchResults() : SearchResults(nullptr) {}
  ~SearchResults() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SearchResults(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchResults(const SearchResults& from);
  SearchResults(SearchResults&& from) noexcept
    : SearchResults() {
    *this = ::std::move(from);
  }

  inline SearchResults& operator=(const SearchResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResults& operator=(SearchResults&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchResults& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchResults* internal_default_instance() {
    return reinterpret_cast<const SearchResults*>(
               &_SearchResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SearchResults& a, SearchResults& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResults* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchResults* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchResults>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchResults& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchResults& from) {
    SearchResults::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResults* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "graph.SearchResults";
  }
  protected:
  explicit SearchResults(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
    kEdgesFieldNumber = 2,
    kIdsSoFarFieldNumber = 3,
  };
  // repeated .graph.Vertex vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;

  public:
  void clear_vertices() ;
  ::graph::Vertex* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph::Vertex >*
      mutable_vertices();
  private:
  const ::graph::Vertex& _internal_vertices(int index) const;
  ::graph::Vertex* _internal_add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::graph::Vertex>& _internal_vertices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::graph::Vertex>* _internal_mutable_vertices();
  public:
  const ::graph::Vertex& vertices(int index) const;
  ::graph::Vertex* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph::Vertex >&
      vertices() const;
  // repeated .graph.Edge edges = 2;
  int edges_size() const;
  private:
  int _internal_edges_size() const;

  public:
  void clear_edges() ;
  ::graph::Edge* mutable_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph::Edge >*
      mutable_edges();
  private:
  const ::graph::Edge& _internal_edges(int index) const;
  ::graph::Edge* _internal_add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::graph::Edge>& _internal_edges() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::graph::Edge>* _internal_mutable_edges();
  public:
  const ::graph::Edge& edges(int index) const;
  ::graph::Edge* add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph::Edge >&
      edges() const;
  // repeated string ids_so_far = 3;
  int ids_so_far_size() const;
  private:
  int _internal_ids_so_far_size() const;

  public:
  void clear_ids_so_far() ;
  const std::string& ids_so_far(int index) const;
  std::string* mutable_ids_so_far(int index);
  void set_ids_so_far(int index, const std::string& value);
  void set_ids_so_far(int index, std::string&& value);
  void set_ids_so_far(int index, const char* value);
  void set_ids_so_far(int index, const char* value, std::size_t size);
  void set_ids_so_far(int index, absl::string_view value);
  std::string* add_ids_so_far();
  void add_ids_so_far(const std::string& value);
  void add_ids_so_far(std::string&& value);
  void add_ids_so_far(const char* value);
  void add_ids_so_far(const char* value, std::size_t size);
  void add_ids_so_far(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids_so_far() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids_so_far();

  private:
  const std::string& _internal_ids_so_far(int index) const;
  std::string* _internal_add_ids_so_far();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_ids_so_far() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_ids_so_far();

  public:
  // @@protoc_insertion_point(class_scope:graph.SearchResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph::Vertex > vertices_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph::Edge > edges_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_so_far_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};// -------------------------------------------------------------------

class PingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph.PingRequest) */ {
 public:
  inline PingRequest() : PingRequest(nullptr) {}
  ~PingRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PingRequest(const PingRequest& from);
  PingRequest(PingRequest&& from) noexcept
    : PingRequest() {
    *this = ::std::move(from);
  }

  inline PingRequest& operator=(const PingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingRequest& operator=(PingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingRequest* internal_default_instance() {
    return reinterpret_cast<const PingRequest*>(
               &_PingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PingRequest& a, PingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PingRequest& from) {
    PingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "graph.PingRequest";
  }
  protected:
  explicit PingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // string data = 1;
  void clear_data() ;
  const std::string& data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:graph.PingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};// -------------------------------------------------------------------

class PingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph.PingResponse) */ {
 public:
  inline PingResponse() : PingResponse(nullptr) {}
  ~PingResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PingResponse(const PingResponse& from);
  PingResponse(PingResponse&& from) noexcept
    : PingResponse() {
    *this = ::std::move(from);
  }

  inline PingResponse& operator=(const PingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingResponse& operator=(PingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingResponse* internal_default_instance() {
    return reinterpret_cast<const PingResponse*>(
               &_PingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PingResponse& a, PingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PingResponse& from) {
    PingResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "graph.PingResponse";
  }
  protected:
  explicit PingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // string data = 1;
  void clear_data() ;
  const std::string& data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:graph.PingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Host

// string key = 1;
inline void Host::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& Host::key() const {
  // @@protoc_insertion_point(field_get:graph.Host.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Host::set_key(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:graph.Host.key)
}
inline std::string* Host::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:graph.Host.key)
  return _s;
}
inline const std::string& Host::_internal_key() const {
  return _impl_.key_.Get();
}
inline void Host::_internal_set_key(const std::string& value) {
  ;


  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* Host::_internal_mutable_key() {
  ;
  return _impl_.key_.Mutable( GetArenaForAllocation());
}
inline std::string* Host::release_key() {
  // @@protoc_insertion_point(field_release:graph.Host.key)
  return _impl_.key_.Release();
}
inline void Host::set_allocated_key(std::string* value) {
  _impl_.key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:graph.Host.key)
}

// string address = 2;
inline void Host::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& Host::address() const {
  // @@protoc_insertion_point(field_get:graph.Host.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Host::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:graph.Host.address)
}
inline std::string* Host::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:graph.Host.address)
  return _s;
}
inline const std::string& Host::_internal_address() const {
  return _impl_.address_.Get();
}
inline void Host::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* Host::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* Host::release_address() {
  // @@protoc_insertion_point(field_release:graph.Host.address)
  return _impl_.address_.Release();
}
inline void Host::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:graph.Host.address)
}

// -------------------------------------------------------------------

// Vertex

// string key = 1;
inline void Vertex::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& Vertex::key() const {
  // @@protoc_insertion_point(field_get:graph.Vertex.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Vertex::set_key(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:graph.Vertex.key)
}
inline std::string* Vertex::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:graph.Vertex.key)
  return _s;
}
inline const std::string& Vertex::_internal_key() const {
  return _impl_.key_.Get();
}
inline void Vertex::_internal_set_key(const std::string& value) {
  ;


  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* Vertex::_internal_mutable_key() {
  ;
  return _impl_.key_.Mutable( GetArenaForAllocation());
}
inline std::string* Vertex::release_key() {
  // @@protoc_insertion_point(field_release:graph.Vertex.key)
  return _impl_.key_.Release();
}
inline void Vertex::set_allocated_key(std::string* value) {
  _impl_.key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:graph.Vertex.key)
}

// string value = 2;
inline void Vertex::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& Vertex::value() const {
  // @@protoc_insertion_point(field_get:graph.Vertex.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Vertex::set_value(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:graph.Vertex.value)
}
inline std::string* Vertex::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:graph.Vertex.value)
  return _s;
}
inline const std::string& Vertex::_internal_value() const {
  return _impl_.value_.Get();
}
inline void Vertex::_internal_set_value(const std::string& value) {
  ;


  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* Vertex::_internal_mutable_value() {
  ;
  return _impl_.value_.Mutable( GetArenaForAllocation());
}
inline std::string* Vertex::release_value() {
  // @@protoc_insertion_point(field_release:graph.Vertex.value)
  return _impl_.value_.Release();
}
inline void Vertex::set_allocated_value(std::string* value) {
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:graph.Vertex.value)
}

// -------------------------------------------------------------------

// Edge

// string from = 1;
inline void Edge::clear_from() {
  _impl_.from_.ClearToEmpty();
}
inline const std::string& Edge::from() const {
  // @@protoc_insertion_point(field_get:graph.Edge.from)
  return _internal_from();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Edge::set_from(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.from_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:graph.Edge.from)
}
inline std::string* Edge::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:graph.Edge.from)
  return _s;
}
inline const std::string& Edge::_internal_from() const {
  return _impl_.from_.Get();
}
inline void Edge::_internal_set_from(const std::string& value) {
  ;


  _impl_.from_.Set(value, GetArenaForAllocation());
}
inline std::string* Edge::_internal_mutable_from() {
  ;
  return _impl_.from_.Mutable( GetArenaForAllocation());
}
inline std::string* Edge::release_from() {
  // @@protoc_insertion_point(field_release:graph.Edge.from)
  return _impl_.from_.Release();
}
inline void Edge::set_allocated_from(std::string* value) {
  _impl_.from_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.from_.IsDefault()) {
          _impl_.from_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:graph.Edge.from)
}

// string to = 2;
inline void Edge::clear_to() {
  _impl_.to_.ClearToEmpty();
}
inline const std::string& Edge::to() const {
  // @@protoc_insertion_point(field_get:graph.Edge.to)
  return _internal_to();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Edge::set_to(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.to_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:graph.Edge.to)
}
inline std::string* Edge::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:graph.Edge.to)
  return _s;
}
inline const std::string& Edge::_internal_to() const {
  return _impl_.to_.Get();
}
inline void Edge::_internal_set_to(const std::string& value) {
  ;


  _impl_.to_.Set(value, GetArenaForAllocation());
}
inline std::string* Edge::_internal_mutable_to() {
  ;
  return _impl_.to_.Mutable( GetArenaForAllocation());
}
inline std::string* Edge::release_to() {
  // @@protoc_insertion_point(field_release:graph.Edge.to)
  return _impl_.to_.Release();
}
inline void Edge::set_allocated_to(std::string* value) {
  _impl_.to_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.to_.IsDefault()) {
          _impl_.to_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:graph.Edge.to)
}

// string label = 3;
inline void Edge::clear_label() {
  _impl_.label_.ClearToEmpty();
}
inline const std::string& Edge::label() const {
  // @@protoc_insertion_point(field_get:graph.Edge.label)
  return _internal_label();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Edge::set_label(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.label_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:graph.Edge.label)
}
inline std::string* Edge::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:graph.Edge.label)
  return _s;
}
inline const std::string& Edge::_internal_label() const {
  return _impl_.label_.Get();
}
inline void Edge::_internal_set_label(const std::string& value) {
  ;


  _impl_.label_.Set(value, GetArenaForAllocation());
}
inline std::string* Edge::_internal_mutable_label() {
  ;
  return _impl_.label_.Mutable( GetArenaForAllocation());
}
inline std::string* Edge::release_label() {
  // @@protoc_insertion_point(field_release:graph.Edge.label)
  return _impl_.label_.Release();
}
inline void Edge::set_allocated_label(std::string* value) {
  _impl_.label_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.label_.IsDefault()) {
          _impl_.label_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:graph.Edge.label)
}

// string lookup_from = 4;
inline void Edge::clear_lookup_from() {
  _impl_.lookup_from_.ClearToEmpty();
}
inline const std::string& Edge::lookup_from() const {
  // @@protoc_insertion_point(field_get:graph.Edge.lookup_from)
  return _internal_lookup_from();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Edge::set_lookup_from(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.lookup_from_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:graph.Edge.lookup_from)
}
inline std::string* Edge::mutable_lookup_from() {
  std::string* _s = _internal_mutable_lookup_from();
  // @@protoc_insertion_point(field_mutable:graph.Edge.lookup_from)
  return _s;
}
inline const std::string& Edge::_internal_lookup_from() const {
  return _impl_.lookup_from_.Get();
}
inline void Edge::_internal_set_lookup_from(const std::string& value) {
  ;


  _impl_.lookup_from_.Set(value, GetArenaForAllocation());
}
inline std::string* Edge::_internal_mutable_lookup_from() {
  ;
  return _impl_.lookup_from_.Mutable( GetArenaForAllocation());
}
inline std::string* Edge::release_lookup_from() {
  // @@protoc_insertion_point(field_release:graph.Edge.lookup_from)
  return _impl_.lookup_from_.Release();
}
inline void Edge::set_allocated_lookup_from(std::string* value) {
  _impl_.lookup_from_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lookup_from_.IsDefault()) {
          _impl_.lookup_from_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:graph.Edge.lookup_from)
}

// string lookup_to = 5;
inline void Edge::clear_lookup_to() {
  _impl_.lookup_to_.ClearToEmpty();
}
inline const std::string& Edge::lookup_to() const {
  // @@protoc_insertion_point(field_get:graph.Edge.lookup_to)
  return _internal_lookup_to();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Edge::set_lookup_to(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.lookup_to_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:graph.Edge.lookup_to)
}
inline std::string* Edge::mutable_lookup_to() {
  std::string* _s = _internal_mutable_lookup_to();
  // @@protoc_insertion_point(field_mutable:graph.Edge.lookup_to)
  return _s;
}
inline const std::string& Edge::_internal_lookup_to() const {
  return _impl_.lookup_to_.Get();
}
inline void Edge::_internal_set_lookup_to(const std::string& value) {
  ;


  _impl_.lookup_to_.Set(value, GetArenaForAllocation());
}
inline std::string* Edge::_internal_mutable_lookup_to() {
  ;
  return _impl_.lookup_to_.Mutable( GetArenaForAllocation());
}
inline std::string* Edge::release_lookup_to() {
  // @@protoc_insertion_point(field_release:graph.Edge.lookup_to)
  return _impl_.lookup_to_.Release();
}
inline void Edge::set_allocated_lookup_to(std::string* value) {
  _impl_.lookup_to_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lookup_to_.IsDefault()) {
          _impl_.lookup_to_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:graph.Edge.lookup_to)
}

// string key = 6;
inline void Edge::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& Edge::key() const {
  // @@protoc_insertion_point(field_get:graph.Edge.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Edge::set_key(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:graph.Edge.key)
}
inline std::string* Edge::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:graph.Edge.key)
  return _s;
}
inline const std::string& Edge::_internal_key() const {
  return _impl_.key_.Get();
}
inline void Edge::_internal_set_key(const std::string& value) {
  ;


  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* Edge::_internal_mutable_key() {
  ;
  return _impl_.key_.Mutable( GetArenaForAllocation());
}
inline std::string* Edge::release_key() {
  // @@protoc_insertion_point(field_release:graph.Edge.key)
  return _impl_.key_.Release();
}
inline void Edge::set_allocated_key(std::string* value) {
  _impl_.key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:graph.Edge.key)
}

// -------------------------------------------------------------------

// GraphSummary

// int32 vertex_count = 1;
inline void GraphSummary::clear_vertex_count() {
  _impl_.vertex_count_ = 0;
}
inline ::int32_t GraphSummary::vertex_count() const {
  // @@protoc_insertion_point(field_get:graph.GraphSummary.vertex_count)
  return _internal_vertex_count();
}
inline void GraphSummary::set_vertex_count(::int32_t value) {
  _internal_set_vertex_count(value);
  // @@protoc_insertion_point(field_set:graph.GraphSummary.vertex_count)
}
inline ::int32_t GraphSummary::_internal_vertex_count() const {
  return _impl_.vertex_count_;
}
inline void GraphSummary::_internal_set_vertex_count(::int32_t value) {
  ;
  _impl_.vertex_count_ = value;
}

// int32 edge_count = 2;
inline void GraphSummary::clear_edge_count() {
  _impl_.edge_count_ = 0;
}
inline ::int32_t GraphSummary::edge_count() const {
  // @@protoc_insertion_point(field_get:graph.GraphSummary.edge_count)
  return _internal_edge_count();
}
inline void GraphSummary::set_edge_count(::int32_t value) {
  _internal_set_edge_count(value);
  // @@protoc_insertion_point(field_set:graph.GraphSummary.edge_count)
}
inline ::int32_t GraphSummary::_internal_edge_count() const {
  return _impl_.edge_count_;
}
inline void GraphSummary::_internal_set_edge_count(::int32_t value) {
  ;
  _impl_.edge_count_ = value;
}

// -------------------------------------------------------------------

// SearchArgs

// string start_key = 1;
inline void SearchArgs::clear_start_key() {
  _impl_.start_key_.ClearToEmpty();
}
inline const std::string& SearchArgs::start_key() const {
  // @@protoc_insertion_point(field_get:graph.SearchArgs.start_key)
  return _internal_start_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SearchArgs::set_start_key(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.start_key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:graph.SearchArgs.start_key)
}
inline std::string* SearchArgs::mutable_start_key() {
  std::string* _s = _internal_mutable_start_key();
  // @@protoc_insertion_point(field_mutable:graph.SearchArgs.start_key)
  return _s;
}
inline const std::string& SearchArgs::_internal_start_key() const {
  return _impl_.start_key_.Get();
}
inline void SearchArgs::_internal_set_start_key(const std::string& value) {
  ;


  _impl_.start_key_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchArgs::_internal_mutable_start_key() {
  ;
  return _impl_.start_key_.Mutable( GetArenaForAllocation());
}
inline std::string* SearchArgs::release_start_key() {
  // @@protoc_insertion_point(field_release:graph.SearchArgs.start_key)
  return _impl_.start_key_.Release();
}
inline void SearchArgs::set_allocated_start_key(std::string* value) {
  _impl_.start_key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.start_key_.IsDefault()) {
          _impl_.start_key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:graph.SearchArgs.start_key)
}

// int32 level = 2;
inline void SearchArgs::clear_level() {
  _impl_.level_ = 0;
}
inline ::int32_t SearchArgs::level() const {
  // @@protoc_insertion_point(field_get:graph.SearchArgs.level)
  return _internal_level();
}
inline void SearchArgs::set_level(::int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:graph.SearchArgs.level)
}
inline ::int32_t SearchArgs::_internal_level() const {
  return _impl_.level_;
}
inline void SearchArgs::_internal_set_level(::int32_t value) {
  ;
  _impl_.level_ = value;
}

// repeated .graph.Vertex vertices = 3;
inline int SearchArgs::_internal_vertices_size() const {
  return _impl_.vertices_.size();
}
inline int SearchArgs::vertices_size() const {
  return _internal_vertices_size();
}
inline void SearchArgs::clear_vertices() {
  _internal_mutable_vertices()->Clear();
}
inline ::graph::Vertex* SearchArgs::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:graph.SearchArgs.vertices)
  return _internal_mutable_vertices()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph::Vertex >*
SearchArgs::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:graph.SearchArgs.vertices)
  return _internal_mutable_vertices();
}
inline const ::graph::Vertex& SearchArgs::_internal_vertices(int index) const {
  return _internal_vertices().Get(index);
}
inline const ::graph::Vertex& SearchArgs::vertices(int index) const {
  // @@protoc_insertion_point(field_get:graph.SearchArgs.vertices)
  return _internal_vertices(index);
}
inline ::graph::Vertex* SearchArgs::_internal_add_vertices() {
  return _internal_mutable_vertices()->Add();
}
inline ::graph::Vertex* SearchArgs::add_vertices() {
  ::graph::Vertex* _add = _internal_add_vertices();
  // @@protoc_insertion_point(field_add:graph.SearchArgs.vertices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph::Vertex >&
SearchArgs::vertices() const {
  // @@protoc_insertion_point(field_list:graph.SearchArgs.vertices)
  return _internal_vertices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::graph::Vertex>&
SearchArgs::_internal_vertices() const {
  return _impl_.vertices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::graph::Vertex>*
SearchArgs::_internal_mutable_vertices() {
  return &_impl_.vertices_;
}

// repeated .graph.Edge edges = 4;
inline int SearchArgs::_internal_edges_size() const {
  return _impl_.edges_.size();
}
inline int SearchArgs::edges_size() const {
  return _internal_edges_size();
}
inline void SearchArgs::clear_edges() {
  _internal_mutable_edges()->Clear();
}
inline ::graph::Edge* SearchArgs::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:graph.SearchArgs.edges)
  return _internal_mutable_edges()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph::Edge >*
SearchArgs::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:graph.SearchArgs.edges)
  return _internal_mutable_edges();
}
inline const ::graph::Edge& SearchArgs::_internal_edges(int index) const {
  return _internal_edges().Get(index);
}
inline const ::graph::Edge& SearchArgs::edges(int index) const {
  // @@protoc_insertion_point(field_get:graph.SearchArgs.edges)
  return _internal_edges(index);
}
inline ::graph::Edge* SearchArgs::_internal_add_edges() {
  return _internal_mutable_edges()->Add();
}
inline ::graph::Edge* SearchArgs::add_edges() {
  ::graph::Edge* _add = _internal_add_edges();
  // @@protoc_insertion_point(field_add:graph.SearchArgs.edges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph::Edge >&
SearchArgs::edges() const {
  // @@protoc_insertion_point(field_list:graph.SearchArgs.edges)
  return _internal_edges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::graph::Edge>&
SearchArgs::_internal_edges() const {
  return _impl_.edges_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::graph::Edge>*
SearchArgs::_internal_mutable_edges() {
  return &_impl_.edges_;
}

// repeated string ids_so_far = 5;
inline int SearchArgs::_internal_ids_so_far_size() const {
  return _impl_.ids_so_far_.size();
}
inline int SearchArgs::ids_so_far_size() const {
  return _internal_ids_so_far_size();
}
inline void SearchArgs::clear_ids_so_far() {
  _internal_mutable_ids_so_far()->Clear();
}
inline std::string* SearchArgs::add_ids_so_far() {
  std::string* _s = _internal_add_ids_so_far();
  // @@protoc_insertion_point(field_add_mutable:graph.SearchArgs.ids_so_far)
  return _s;
}
inline const std::string& SearchArgs::ids_so_far(int index) const {
  // @@protoc_insertion_point(field_get:graph.SearchArgs.ids_so_far)
  return _internal_ids_so_far(index);
}
inline std::string* SearchArgs::mutable_ids_so_far(int index) {
  // @@protoc_insertion_point(field_mutable:graph.SearchArgs.ids_so_far)
  return _internal_mutable_ids_so_far()->Mutable(index);
}
inline void SearchArgs::set_ids_so_far(int index, const std::string& value) {
  _internal_mutable_ids_so_far()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:graph.SearchArgs.ids_so_far)
}
inline void SearchArgs::set_ids_so_far(int index, std::string&& value) {
  _internal_mutable_ids_so_far()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:graph.SearchArgs.ids_so_far)
}
inline void SearchArgs::set_ids_so_far(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_ids_so_far()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:graph.SearchArgs.ids_so_far)
}
inline void SearchArgs::set_ids_so_far(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_ids_so_far()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:graph.SearchArgs.ids_so_far)
}
inline void SearchArgs::set_ids_so_far(int index, absl::string_view value) {
  _internal_mutable_ids_so_far()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:graph.SearchArgs.ids_so_far)
}
inline void SearchArgs::add_ids_so_far(const std::string& value) {
  _internal_mutable_ids_so_far()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:graph.SearchArgs.ids_so_far)
}
inline void SearchArgs::add_ids_so_far(std::string&& value) {
  _internal_mutable_ids_so_far()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:graph.SearchArgs.ids_so_far)
}
inline void SearchArgs::add_ids_so_far(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_ids_so_far()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:graph.SearchArgs.ids_so_far)
}
inline void SearchArgs::add_ids_so_far(const char* value, std::size_t size) {
  _internal_mutable_ids_so_far()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:graph.SearchArgs.ids_so_far)
}
inline void SearchArgs::add_ids_so_far(absl::string_view value) {
  _internal_mutable_ids_so_far()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:graph.SearchArgs.ids_so_far)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchArgs::ids_so_far() const {
  // @@protoc_insertion_point(field_list:graph.SearchArgs.ids_so_far)
  return _internal_ids_so_far();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* SearchArgs::mutable_ids_so_far() {
  // @@protoc_insertion_point(field_mutable_list:graph.SearchArgs.ids_so_far)
  return _internal_mutable_ids_so_far();
}
inline const std::string& SearchArgs::_internal_ids_so_far(int index) const {
  return _internal_ids_so_far().Get(index);
}
inline std::string* SearchArgs::_internal_add_ids_so_far() {
  return _internal_mutable_ids_so_far()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchArgs::_internal_ids_so_far() const {
  return _impl_.ids_so_far_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SearchArgs::_internal_mutable_ids_so_far() {
  return &_impl_.ids_so_far_;
}

// -------------------------------------------------------------------

// SearchResults

// repeated .graph.Vertex vertices = 1;
inline int SearchResults::_internal_vertices_size() const {
  return _impl_.vertices_.size();
}
inline int SearchResults::vertices_size() const {
  return _internal_vertices_size();
}
inline void SearchResults::clear_vertices() {
  _internal_mutable_vertices()->Clear();
}
inline ::graph::Vertex* SearchResults::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:graph.SearchResults.vertices)
  return _internal_mutable_vertices()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph::Vertex >*
SearchResults::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:graph.SearchResults.vertices)
  return _internal_mutable_vertices();
}
inline const ::graph::Vertex& SearchResults::_internal_vertices(int index) const {
  return _internal_vertices().Get(index);
}
inline const ::graph::Vertex& SearchResults::vertices(int index) const {
  // @@protoc_insertion_point(field_get:graph.SearchResults.vertices)
  return _internal_vertices(index);
}
inline ::graph::Vertex* SearchResults::_internal_add_vertices() {
  return _internal_mutable_vertices()->Add();
}
inline ::graph::Vertex* SearchResults::add_vertices() {
  ::graph::Vertex* _add = _internal_add_vertices();
  // @@protoc_insertion_point(field_add:graph.SearchResults.vertices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph::Vertex >&
SearchResults::vertices() const {
  // @@protoc_insertion_point(field_list:graph.SearchResults.vertices)
  return _internal_vertices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::graph::Vertex>&
SearchResults::_internal_vertices() const {
  return _impl_.vertices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::graph::Vertex>*
SearchResults::_internal_mutable_vertices() {
  return &_impl_.vertices_;
}

// repeated .graph.Edge edges = 2;
inline int SearchResults::_internal_edges_size() const {
  return _impl_.edges_.size();
}
inline int SearchResults::edges_size() const {
  return _internal_edges_size();
}
inline void SearchResults::clear_edges() {
  _internal_mutable_edges()->Clear();
}
inline ::graph::Edge* SearchResults::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:graph.SearchResults.edges)
  return _internal_mutable_edges()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph::Edge >*
SearchResults::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:graph.SearchResults.edges)
  return _internal_mutable_edges();
}
inline const ::graph::Edge& SearchResults::_internal_edges(int index) const {
  return _internal_edges().Get(index);
}
inline const ::graph::Edge& SearchResults::edges(int index) const {
  // @@protoc_insertion_point(field_get:graph.SearchResults.edges)
  return _internal_edges(index);
}
inline ::graph::Edge* SearchResults::_internal_add_edges() {
  return _internal_mutable_edges()->Add();
}
inline ::graph::Edge* SearchResults::add_edges() {
  ::graph::Edge* _add = _internal_add_edges();
  // @@protoc_insertion_point(field_add:graph.SearchResults.edges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph::Edge >&
SearchResults::edges() const {
  // @@protoc_insertion_point(field_list:graph.SearchResults.edges)
  return _internal_edges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::graph::Edge>&
SearchResults::_internal_edges() const {
  return _impl_.edges_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::graph::Edge>*
SearchResults::_internal_mutable_edges() {
  return &_impl_.edges_;
}

// repeated string ids_so_far = 3;
inline int SearchResults::_internal_ids_so_far_size() const {
  return _impl_.ids_so_far_.size();
}
inline int SearchResults::ids_so_far_size() const {
  return _internal_ids_so_far_size();
}
inline void SearchResults::clear_ids_so_far() {
  _internal_mutable_ids_so_far()->Clear();
}
inline std::string* SearchResults::add_ids_so_far() {
  std::string* _s = _internal_add_ids_so_far();
  // @@protoc_insertion_point(field_add_mutable:graph.SearchResults.ids_so_far)
  return _s;
}
inline const std::string& SearchResults::ids_so_far(int index) const {
  // @@protoc_insertion_point(field_get:graph.SearchResults.ids_so_far)
  return _internal_ids_so_far(index);
}
inline std::string* SearchResults::mutable_ids_so_far(int index) {
  // @@protoc_insertion_point(field_mutable:graph.SearchResults.ids_so_far)
  return _internal_mutable_ids_so_far()->Mutable(index);
}
inline void SearchResults::set_ids_so_far(int index, const std::string& value) {
  _internal_mutable_ids_so_far()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:graph.SearchResults.ids_so_far)
}
inline void SearchResults::set_ids_so_far(int index, std::string&& value) {
  _internal_mutable_ids_so_far()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:graph.SearchResults.ids_so_far)
}
inline void SearchResults::set_ids_so_far(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_ids_so_far()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:graph.SearchResults.ids_so_far)
}
inline void SearchResults::set_ids_so_far(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_ids_so_far()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:graph.SearchResults.ids_so_far)
}
inline void SearchResults::set_ids_so_far(int index, absl::string_view value) {
  _internal_mutable_ids_so_far()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:graph.SearchResults.ids_so_far)
}
inline void SearchResults::add_ids_so_far(const std::string& value) {
  _internal_mutable_ids_so_far()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:graph.SearchResults.ids_so_far)
}
inline void SearchResults::add_ids_so_far(std::string&& value) {
  _internal_mutable_ids_so_far()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:graph.SearchResults.ids_so_far)
}
inline void SearchResults::add_ids_so_far(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_ids_so_far()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:graph.SearchResults.ids_so_far)
}
inline void SearchResults::add_ids_so_far(const char* value, std::size_t size) {
  _internal_mutable_ids_so_far()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:graph.SearchResults.ids_so_far)
}
inline void SearchResults::add_ids_so_far(absl::string_view value) {
  _internal_mutable_ids_so_far()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:graph.SearchResults.ids_so_far)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchResults::ids_so_far() const {
  // @@protoc_insertion_point(field_list:graph.SearchResults.ids_so_far)
  return _internal_ids_so_far();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* SearchResults::mutable_ids_so_far() {
  // @@protoc_insertion_point(field_mutable_list:graph.SearchResults.ids_so_far)
  return _internal_mutable_ids_so_far();
}
inline const std::string& SearchResults::_internal_ids_so_far(int index) const {
  return _internal_ids_so_far().Get(index);
}
inline std::string* SearchResults::_internal_add_ids_so_far() {
  return _internal_mutable_ids_so_far()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchResults::_internal_ids_so_far() const {
  return _impl_.ids_so_far_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SearchResults::_internal_mutable_ids_so_far() {
  return &_impl_.ids_so_far_;
}

// -------------------------------------------------------------------

// PingRequest

// string data = 1;
inline void PingRequest::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& PingRequest::data() const {
  // @@protoc_insertion_point(field_get:graph.PingRequest.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PingRequest::set_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:graph.PingRequest.data)
}
inline std::string* PingRequest::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:graph.PingRequest.data)
  return _s;
}
inline const std::string& PingRequest::_internal_data() const {
  return _impl_.data_.Get();
}
inline void PingRequest::_internal_set_data(const std::string& value) {
  ;


  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* PingRequest::_internal_mutable_data() {
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* PingRequest::release_data() {
  // @@protoc_insertion_point(field_release:graph.PingRequest.data)
  return _impl_.data_.Release();
}
inline void PingRequest::set_allocated_data(std::string* value) {
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:graph.PingRequest.data)
}

// -------------------------------------------------------------------

// PingResponse

// string data = 1;
inline void PingResponse::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& PingResponse::data() const {
  // @@protoc_insertion_point(field_get:graph.PingResponse.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PingResponse::set_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:graph.PingResponse.data)
}
inline std::string* PingResponse::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:graph.PingResponse.data)
  return _s;
}
inline const std::string& PingResponse::_internal_data() const {
  return _impl_.data_.Get();
}
inline void PingResponse::_internal_set_data(const std::string& value) {
  ;


  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* PingResponse::_internal_mutable_data() {
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* PingResponse::release_data() {
  // @@protoc_insertion_point(field_release:graph.PingResponse.data)
  return _impl_.data_.Release();
}
inline void PingResponse::set_allocated_data(std::string* value) {
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:graph.PingResponse.data)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace graph


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_graph_2eproto_2epb_2eh
