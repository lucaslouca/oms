// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: orchestrator.proto

#include "orchestrator.pb.h"
#include "orchestrator.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace orchestrator {

static const char* Orchestrator_method_names[] = {
  "/orchestrator.Orchestrator/AddVertex",
  "/orchestrator.Orchestrator/DeleteVertex",
  "/orchestrator.Orchestrator/AddEdge",
  "/orchestrator.Orchestrator/DeleteEdge",
  "/orchestrator.Orchestrator/Search",
};

std::unique_ptr< Orchestrator::Stub> Orchestrator::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Orchestrator::Stub> stub(new Orchestrator::Stub(channel, options));
  return stub;
}

Orchestrator::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_AddVertex_(Orchestrator_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_DeleteVertex_(Orchestrator_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_AddEdge_(Orchestrator_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_DeleteEdge_(Orchestrator_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_Search_(Orchestrator_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientWriter< ::orchestrator::ApiVertex>* Orchestrator::Stub::AddVertexRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response) {
  return ::grpc::internal::ClientWriterFactory< ::orchestrator::ApiVertex>::Create(channel_.get(), rpcmethod_AddVertex_, context, response);
}

void Orchestrator::Stub::async::AddVertex(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::ClientWriteReactor< ::orchestrator::ApiVertex>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::orchestrator::ApiVertex>::Create(stub_->channel_.get(), stub_->rpcmethod_AddVertex_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::orchestrator::ApiVertex>* Orchestrator::Stub::AsyncAddVertexRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::orchestrator::ApiVertex>::Create(channel_.get(), cq, rpcmethod_AddVertex_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::orchestrator::ApiVertex>* Orchestrator::Stub::PrepareAsyncAddVertexRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::orchestrator::ApiVertex>::Create(channel_.get(), cq, rpcmethod_AddVertex_, context, response, false, nullptr);
}

::grpc::ClientWriter< ::orchestrator::ApiVertex>* Orchestrator::Stub::DeleteVertexRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response) {
  return ::grpc::internal::ClientWriterFactory< ::orchestrator::ApiVertex>::Create(channel_.get(), rpcmethod_DeleteVertex_, context, response);
}

void Orchestrator::Stub::async::DeleteVertex(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::ClientWriteReactor< ::orchestrator::ApiVertex>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::orchestrator::ApiVertex>::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteVertex_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::orchestrator::ApiVertex>* Orchestrator::Stub::AsyncDeleteVertexRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::orchestrator::ApiVertex>::Create(channel_.get(), cq, rpcmethod_DeleteVertex_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::orchestrator::ApiVertex>* Orchestrator::Stub::PrepareAsyncDeleteVertexRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::orchestrator::ApiVertex>::Create(channel_.get(), cq, rpcmethod_DeleteVertex_, context, response, false, nullptr);
}

::grpc::ClientWriter< ::orchestrator::ApiEdge>* Orchestrator::Stub::AddEdgeRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response) {
  return ::grpc::internal::ClientWriterFactory< ::orchestrator::ApiEdge>::Create(channel_.get(), rpcmethod_AddEdge_, context, response);
}

void Orchestrator::Stub::async::AddEdge(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::ClientWriteReactor< ::orchestrator::ApiEdge>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::orchestrator::ApiEdge>::Create(stub_->channel_.get(), stub_->rpcmethod_AddEdge_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::orchestrator::ApiEdge>* Orchestrator::Stub::AsyncAddEdgeRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::orchestrator::ApiEdge>::Create(channel_.get(), cq, rpcmethod_AddEdge_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::orchestrator::ApiEdge>* Orchestrator::Stub::PrepareAsyncAddEdgeRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::orchestrator::ApiEdge>::Create(channel_.get(), cq, rpcmethod_AddEdge_, context, response, false, nullptr);
}

::grpc::ClientWriter< ::orchestrator::ApiEdge>* Orchestrator::Stub::DeleteEdgeRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response) {
  return ::grpc::internal::ClientWriterFactory< ::orchestrator::ApiEdge>::Create(channel_.get(), rpcmethod_DeleteEdge_, context, response);
}

void Orchestrator::Stub::async::DeleteEdge(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::ClientWriteReactor< ::orchestrator::ApiEdge>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::orchestrator::ApiEdge>::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteEdge_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::orchestrator::ApiEdge>* Orchestrator::Stub::AsyncDeleteEdgeRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::orchestrator::ApiEdge>::Create(channel_.get(), cq, rpcmethod_DeleteEdge_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::orchestrator::ApiEdge>* Orchestrator::Stub::PrepareAsyncDeleteEdgeRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::orchestrator::ApiEdge>::Create(channel_.get(), cq, rpcmethod_DeleteEdge_, context, response, false, nullptr);
}

::grpc::Status Orchestrator::Stub::Search(::grpc::ClientContext* context, const ::orchestrator::ApiSearchArgs& request, ::orchestrator::ApiSearchResults* response) {
  return ::grpc::internal::BlockingUnaryCall< ::orchestrator::ApiSearchArgs, ::orchestrator::ApiSearchResults, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Search_, context, request, response);
}

void Orchestrator::Stub::async::Search(::grpc::ClientContext* context, const ::orchestrator::ApiSearchArgs* request, ::orchestrator::ApiSearchResults* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::orchestrator::ApiSearchArgs, ::orchestrator::ApiSearchResults, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, response, std::move(f));
}

void Orchestrator::Stub::async::Search(::grpc::ClientContext* context, const ::orchestrator::ApiSearchArgs* request, ::orchestrator::ApiSearchResults* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::orchestrator::ApiSearchResults>* Orchestrator::Stub::PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::orchestrator::ApiSearchArgs& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::orchestrator::ApiSearchResults, ::orchestrator::ApiSearchArgs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Search_, context, request);
}

::grpc::ClientAsyncResponseReader< ::orchestrator::ApiSearchResults>* Orchestrator::Stub::AsyncSearchRaw(::grpc::ClientContext* context, const ::orchestrator::ApiSearchArgs& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSearchRaw(context, request, cq);
  result->StartCall();
  return result;
}

Orchestrator::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Orchestrator_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Orchestrator::Service, ::orchestrator::ApiVertex, ::orchestrator::ApiGraphSummary>(
          [](Orchestrator::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::orchestrator::ApiVertex>* reader,
             ::orchestrator::ApiGraphSummary* resp) {
               return service->AddVertex(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Orchestrator_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Orchestrator::Service, ::orchestrator::ApiVertex, ::orchestrator::ApiGraphSummary>(
          [](Orchestrator::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::orchestrator::ApiVertex>* reader,
             ::orchestrator::ApiGraphSummary* resp) {
               return service->DeleteVertex(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Orchestrator_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Orchestrator::Service, ::orchestrator::ApiEdge, ::orchestrator::ApiGraphSummary>(
          [](Orchestrator::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::orchestrator::ApiEdge>* reader,
             ::orchestrator::ApiGraphSummary* resp) {
               return service->AddEdge(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Orchestrator_method_names[3],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Orchestrator::Service, ::orchestrator::ApiEdge, ::orchestrator::ApiGraphSummary>(
          [](Orchestrator::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::orchestrator::ApiEdge>* reader,
             ::orchestrator::ApiGraphSummary* resp) {
               return service->DeleteEdge(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Orchestrator_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Orchestrator::Service, ::orchestrator::ApiSearchArgs, ::orchestrator::ApiSearchResults, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Orchestrator::Service* service,
             ::grpc::ServerContext* ctx,
             const ::orchestrator::ApiSearchArgs* req,
             ::orchestrator::ApiSearchResults* resp) {
               return service->Search(ctx, req, resp);
             }, this)));
}

Orchestrator::Service::~Service() {
}

::grpc::Status Orchestrator::Service::AddVertex(::grpc::ServerContext* context, ::grpc::ServerReader< ::orchestrator::ApiVertex>* reader, ::orchestrator::ApiGraphSummary* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Orchestrator::Service::DeleteVertex(::grpc::ServerContext* context, ::grpc::ServerReader< ::orchestrator::ApiVertex>* reader, ::orchestrator::ApiGraphSummary* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Orchestrator::Service::AddEdge(::grpc::ServerContext* context, ::grpc::ServerReader< ::orchestrator::ApiEdge>* reader, ::orchestrator::ApiGraphSummary* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Orchestrator::Service::DeleteEdge(::grpc::ServerContext* context, ::grpc::ServerReader< ::orchestrator::ApiEdge>* reader, ::orchestrator::ApiGraphSummary* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Orchestrator::Service::Search(::grpc::ServerContext* context, const ::orchestrator::ApiSearchArgs* request, ::orchestrator::ApiSearchResults* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace orchestrator

