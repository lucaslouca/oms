// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: orchestrator.proto
#ifndef GRPC_orchestrator_2eproto__INCLUDED
#define GRPC_orchestrator_2eproto__INCLUDED

#include "orchestrator.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace orchestrator {

class Orchestrator final {
 public:
  static constexpr char const* service_full_name() {
    return "orchestrator.Orchestrator";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientWriterInterface< ::orchestrator::ApiVertex>> AddVertex(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::orchestrator::ApiVertex>>(AddVertexRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::orchestrator::ApiVertex>> AsyncAddVertex(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::orchestrator::ApiVertex>>(AsyncAddVertexRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::orchestrator::ApiVertex>> PrepareAsyncAddVertex(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::orchestrator::ApiVertex>>(PrepareAsyncAddVertexRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::orchestrator::ApiVertex>> DeleteVertex(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::orchestrator::ApiVertex>>(DeleteVertexRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::orchestrator::ApiVertex>> AsyncDeleteVertex(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::orchestrator::ApiVertex>>(AsyncDeleteVertexRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::orchestrator::ApiVertex>> PrepareAsyncDeleteVertex(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::orchestrator::ApiVertex>>(PrepareAsyncDeleteVertexRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::orchestrator::ApiEdge>> AddEdge(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::orchestrator::ApiEdge>>(AddEdgeRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::orchestrator::ApiEdge>> AsyncAddEdge(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::orchestrator::ApiEdge>>(AsyncAddEdgeRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::orchestrator::ApiEdge>> PrepareAsyncAddEdge(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::orchestrator::ApiEdge>>(PrepareAsyncAddEdgeRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::orchestrator::ApiEdge>> DeleteEdge(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::orchestrator::ApiEdge>>(DeleteEdgeRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::orchestrator::ApiEdge>> AsyncDeleteEdge(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::orchestrator::ApiEdge>>(AsyncDeleteEdgeRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::orchestrator::ApiEdge>> PrepareAsyncDeleteEdge(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::orchestrator::ApiEdge>>(PrepareAsyncDeleteEdgeRaw(context, response, cq));
    }
    virtual ::grpc::Status Search(::grpc::ClientContext* context, const ::orchestrator::ApiSearchArgs& request, ::orchestrator::ApiSearchResults* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orchestrator::ApiSearchResults>> AsyncSearch(::grpc::ClientContext* context, const ::orchestrator::ApiSearchArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orchestrator::ApiSearchResults>>(AsyncSearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orchestrator::ApiSearchResults>> PrepareAsyncSearch(::grpc::ClientContext* context, const ::orchestrator::ApiSearchArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orchestrator::ApiSearchResults>>(PrepareAsyncSearchRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void AddVertex(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::ClientWriteReactor< ::orchestrator::ApiVertex>* reactor) = 0;
      virtual void DeleteVertex(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::ClientWriteReactor< ::orchestrator::ApiVertex>* reactor) = 0;
      virtual void AddEdge(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::ClientWriteReactor< ::orchestrator::ApiEdge>* reactor) = 0;
      virtual void DeleteEdge(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::ClientWriteReactor< ::orchestrator::ApiEdge>* reactor) = 0;
      virtual void Search(::grpc::ClientContext* context, const ::orchestrator::ApiSearchArgs* request, ::orchestrator::ApiSearchResults* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Search(::grpc::ClientContext* context, const ::orchestrator::ApiSearchArgs* request, ::orchestrator::ApiSearchResults* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientWriterInterface< ::orchestrator::ApiVertex>* AddVertexRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::orchestrator::ApiVertex>* AsyncAddVertexRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::orchestrator::ApiVertex>* PrepareAsyncAddVertexRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::orchestrator::ApiVertex>* DeleteVertexRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::orchestrator::ApiVertex>* AsyncDeleteVertexRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::orchestrator::ApiVertex>* PrepareAsyncDeleteVertexRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::orchestrator::ApiEdge>* AddEdgeRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::orchestrator::ApiEdge>* AsyncAddEdgeRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::orchestrator::ApiEdge>* PrepareAsyncAddEdgeRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::orchestrator::ApiEdge>* DeleteEdgeRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::orchestrator::ApiEdge>* AsyncDeleteEdgeRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::orchestrator::ApiEdge>* PrepareAsyncDeleteEdgeRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::orchestrator::ApiSearchResults>* AsyncSearchRaw(::grpc::ClientContext* context, const ::orchestrator::ApiSearchArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::orchestrator::ApiSearchResults>* PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::orchestrator::ApiSearchArgs& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientWriter< ::orchestrator::ApiVertex>> AddVertex(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::orchestrator::ApiVertex>>(AddVertexRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::orchestrator::ApiVertex>> AsyncAddVertex(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::orchestrator::ApiVertex>>(AsyncAddVertexRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::orchestrator::ApiVertex>> PrepareAsyncAddVertex(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::orchestrator::ApiVertex>>(PrepareAsyncAddVertexRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::orchestrator::ApiVertex>> DeleteVertex(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::orchestrator::ApiVertex>>(DeleteVertexRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::orchestrator::ApiVertex>> AsyncDeleteVertex(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::orchestrator::ApiVertex>>(AsyncDeleteVertexRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::orchestrator::ApiVertex>> PrepareAsyncDeleteVertex(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::orchestrator::ApiVertex>>(PrepareAsyncDeleteVertexRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::orchestrator::ApiEdge>> AddEdge(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::orchestrator::ApiEdge>>(AddEdgeRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::orchestrator::ApiEdge>> AsyncAddEdge(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::orchestrator::ApiEdge>>(AsyncAddEdgeRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::orchestrator::ApiEdge>> PrepareAsyncAddEdge(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::orchestrator::ApiEdge>>(PrepareAsyncAddEdgeRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::orchestrator::ApiEdge>> DeleteEdge(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::orchestrator::ApiEdge>>(DeleteEdgeRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::orchestrator::ApiEdge>> AsyncDeleteEdge(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::orchestrator::ApiEdge>>(AsyncDeleteEdgeRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::orchestrator::ApiEdge>> PrepareAsyncDeleteEdge(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::orchestrator::ApiEdge>>(PrepareAsyncDeleteEdgeRaw(context, response, cq));
    }
    ::grpc::Status Search(::grpc::ClientContext* context, const ::orchestrator::ApiSearchArgs& request, ::orchestrator::ApiSearchResults* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orchestrator::ApiSearchResults>> AsyncSearch(::grpc::ClientContext* context, const ::orchestrator::ApiSearchArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orchestrator::ApiSearchResults>>(AsyncSearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orchestrator::ApiSearchResults>> PrepareAsyncSearch(::grpc::ClientContext* context, const ::orchestrator::ApiSearchArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orchestrator::ApiSearchResults>>(PrepareAsyncSearchRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AddVertex(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::ClientWriteReactor< ::orchestrator::ApiVertex>* reactor) override;
      void DeleteVertex(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::ClientWriteReactor< ::orchestrator::ApiVertex>* reactor) override;
      void AddEdge(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::ClientWriteReactor< ::orchestrator::ApiEdge>* reactor) override;
      void DeleteEdge(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::ClientWriteReactor< ::orchestrator::ApiEdge>* reactor) override;
      void Search(::grpc::ClientContext* context, const ::orchestrator::ApiSearchArgs* request, ::orchestrator::ApiSearchResults* response, std::function<void(::grpc::Status)>) override;
      void Search(::grpc::ClientContext* context, const ::orchestrator::ApiSearchArgs* request, ::orchestrator::ApiSearchResults* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientWriter< ::orchestrator::ApiVertex>* AddVertexRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response) override;
    ::grpc::ClientAsyncWriter< ::orchestrator::ApiVertex>* AsyncAddVertexRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::orchestrator::ApiVertex>* PrepareAsyncAddVertexRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::orchestrator::ApiVertex>* DeleteVertexRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response) override;
    ::grpc::ClientAsyncWriter< ::orchestrator::ApiVertex>* AsyncDeleteVertexRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::orchestrator::ApiVertex>* PrepareAsyncDeleteVertexRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::orchestrator::ApiEdge>* AddEdgeRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response) override;
    ::grpc::ClientAsyncWriter< ::orchestrator::ApiEdge>* AsyncAddEdgeRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::orchestrator::ApiEdge>* PrepareAsyncAddEdgeRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::orchestrator::ApiEdge>* DeleteEdgeRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response) override;
    ::grpc::ClientAsyncWriter< ::orchestrator::ApiEdge>* AsyncDeleteEdgeRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::orchestrator::ApiEdge>* PrepareAsyncDeleteEdgeRaw(::grpc::ClientContext* context, ::orchestrator::ApiGraphSummary* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::orchestrator::ApiSearchResults>* AsyncSearchRaw(::grpc::ClientContext* context, const ::orchestrator::ApiSearchArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::orchestrator::ApiSearchResults>* PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::orchestrator::ApiSearchArgs& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AddVertex_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteVertex_;
    const ::grpc::internal::RpcMethod rpcmethod_AddEdge_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteEdge_;
    const ::grpc::internal::RpcMethod rpcmethod_Search_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AddVertex(::grpc::ServerContext* context, ::grpc::ServerReader< ::orchestrator::ApiVertex>* reader, ::orchestrator::ApiGraphSummary* response);
    virtual ::grpc::Status DeleteVertex(::grpc::ServerContext* context, ::grpc::ServerReader< ::orchestrator::ApiVertex>* reader, ::orchestrator::ApiGraphSummary* response);
    virtual ::grpc::Status AddEdge(::grpc::ServerContext* context, ::grpc::ServerReader< ::orchestrator::ApiEdge>* reader, ::orchestrator::ApiGraphSummary* response);
    virtual ::grpc::Status DeleteEdge(::grpc::ServerContext* context, ::grpc::ServerReader< ::orchestrator::ApiEdge>* reader, ::orchestrator::ApiGraphSummary* response);
    virtual ::grpc::Status Search(::grpc::ServerContext* context, const ::orchestrator::ApiSearchArgs* request, ::orchestrator::ApiSearchResults* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AddVertex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddVertex() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AddVertex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddVertex(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::orchestrator::ApiVertex>* /*reader*/, ::orchestrator::ApiGraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddVertex(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::orchestrator::ApiGraphSummary, ::orchestrator::ApiVertex>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteVertex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteVertex() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DeleteVertex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVertex(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::orchestrator::ApiVertex>* /*reader*/, ::orchestrator::ApiGraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteVertex(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::orchestrator::ApiGraphSummary, ::orchestrator::ApiVertex>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddEdge() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_AddEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEdge(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::orchestrator::ApiEdge>* /*reader*/, ::orchestrator::ApiGraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddEdge(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::orchestrator::ApiGraphSummary, ::orchestrator::ApiEdge>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteEdge() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEdge(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::orchestrator::ApiEdge>* /*reader*/, ::orchestrator::ApiGraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteEdge(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::orchestrator::ApiGraphSummary, ::orchestrator::ApiEdge>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(3, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Search() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::orchestrator::ApiSearchArgs* /*request*/, ::orchestrator::ApiSearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearch(::grpc::ServerContext* context, ::orchestrator::ApiSearchArgs* request, ::grpc::ServerAsyncResponseWriter< ::orchestrator::ApiSearchResults>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AddVertex<WithAsyncMethod_DeleteVertex<WithAsyncMethod_AddEdge<WithAsyncMethod_DeleteEdge<WithAsyncMethod_Search<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AddVertex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddVertex() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::orchestrator::ApiVertex, ::orchestrator::ApiGraphSummary>(
            [this](
                   ::grpc::CallbackServerContext* context, ::orchestrator::ApiGraphSummary* response) { return this->AddVertex(context, response); }));
    }
    ~WithCallbackMethod_AddVertex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddVertex(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::orchestrator::ApiVertex>* /*reader*/, ::orchestrator::ApiGraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::orchestrator::ApiVertex>* AddVertex(
      ::grpc::CallbackServerContext* /*context*/, ::orchestrator::ApiGraphSummary* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteVertex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteVertex() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::orchestrator::ApiVertex, ::orchestrator::ApiGraphSummary>(
            [this](
                   ::grpc::CallbackServerContext* context, ::orchestrator::ApiGraphSummary* response) { return this->DeleteVertex(context, response); }));
    }
    ~WithCallbackMethod_DeleteVertex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVertex(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::orchestrator::ApiVertex>* /*reader*/, ::orchestrator::ApiGraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::orchestrator::ApiVertex>* DeleteVertex(
      ::grpc::CallbackServerContext* /*context*/, ::orchestrator::ApiGraphSummary* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddEdge() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::orchestrator::ApiEdge, ::orchestrator::ApiGraphSummary>(
            [this](
                   ::grpc::CallbackServerContext* context, ::orchestrator::ApiGraphSummary* response) { return this->AddEdge(context, response); }));
    }
    ~WithCallbackMethod_AddEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEdge(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::orchestrator::ApiEdge>* /*reader*/, ::orchestrator::ApiGraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::orchestrator::ApiEdge>* AddEdge(
      ::grpc::CallbackServerContext* /*context*/, ::orchestrator::ApiGraphSummary* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteEdge() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackClientStreamingHandler< ::orchestrator::ApiEdge, ::orchestrator::ApiGraphSummary>(
            [this](
                   ::grpc::CallbackServerContext* context, ::orchestrator::ApiGraphSummary* response) { return this->DeleteEdge(context, response); }));
    }
    ~WithCallbackMethod_DeleteEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEdge(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::orchestrator::ApiEdge>* /*reader*/, ::orchestrator::ApiGraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::orchestrator::ApiEdge>* DeleteEdge(
      ::grpc::CallbackServerContext* /*context*/, ::orchestrator::ApiGraphSummary* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Search() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::orchestrator::ApiSearchArgs, ::orchestrator::ApiSearchResults>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::orchestrator::ApiSearchArgs* request, ::orchestrator::ApiSearchResults* response) { return this->Search(context, request, response); }));}
    void SetMessageAllocatorFor_Search(
        ::grpc::MessageAllocator< ::orchestrator::ApiSearchArgs, ::orchestrator::ApiSearchResults>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::orchestrator::ApiSearchArgs, ::orchestrator::ApiSearchResults>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::orchestrator::ApiSearchArgs* /*request*/, ::orchestrator::ApiSearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Search(
      ::grpc::CallbackServerContext* /*context*/, const ::orchestrator::ApiSearchArgs* /*request*/, ::orchestrator::ApiSearchResults* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AddVertex<WithCallbackMethod_DeleteVertex<WithCallbackMethod_AddEdge<WithCallbackMethod_DeleteEdge<WithCallbackMethod_Search<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AddVertex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddVertex() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AddVertex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddVertex(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::orchestrator::ApiVertex>* /*reader*/, ::orchestrator::ApiGraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteVertex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteVertex() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DeleteVertex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVertex(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::orchestrator::ApiVertex>* /*reader*/, ::orchestrator::ApiGraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddEdge() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_AddEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEdge(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::orchestrator::ApiEdge>* /*reader*/, ::orchestrator::ApiGraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteEdge() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEdge(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::orchestrator::ApiEdge>* /*reader*/, ::orchestrator::ApiGraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Search() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::orchestrator::ApiSearchArgs* /*request*/, ::orchestrator::ApiSearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddVertex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddVertex() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AddVertex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddVertex(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::orchestrator::ApiVertex>* /*reader*/, ::orchestrator::ApiGraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddVertex(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteVertex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteVertex() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DeleteVertex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVertex(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::orchestrator::ApiVertex>* /*reader*/, ::orchestrator::ApiGraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteVertex(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddEdge() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_AddEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEdge(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::orchestrator::ApiEdge>* /*reader*/, ::orchestrator::ApiGraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddEdge(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteEdge() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEdge(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::orchestrator::ApiEdge>* /*reader*/, ::orchestrator::ApiGraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteEdge(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(3, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Search() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::orchestrator::ApiSearchArgs* /*request*/, ::orchestrator::ApiSearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddVertex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddVertex() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->AddVertex(context, response); }));
    }
    ~WithRawCallbackMethod_AddVertex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddVertex(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::orchestrator::ApiVertex>* /*reader*/, ::orchestrator::ApiGraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* AddVertex(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteVertex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteVertex() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->DeleteVertex(context, response); }));
    }
    ~WithRawCallbackMethod_DeleteVertex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVertex(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::orchestrator::ApiVertex>* /*reader*/, ::orchestrator::ApiGraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* DeleteVertex(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddEdge() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->AddEdge(context, response); }));
    }
    ~WithRawCallbackMethod_AddEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEdge(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::orchestrator::ApiEdge>* /*reader*/, ::orchestrator::ApiGraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* AddEdge(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteEdge() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->DeleteEdge(context, response); }));
    }
    ~WithRawCallbackMethod_DeleteEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEdge(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::orchestrator::ApiEdge>* /*reader*/, ::orchestrator::ApiGraphSummary* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* DeleteEdge(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Search() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Search(context, request, response); }));
    }
    ~WithRawCallbackMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::orchestrator::ApiSearchArgs* /*request*/, ::orchestrator::ApiSearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Search(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Search() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::orchestrator::ApiSearchArgs, ::orchestrator::ApiSearchResults>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::orchestrator::ApiSearchArgs, ::orchestrator::ApiSearchResults>* streamer) {
                       return this->StreamedSearch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::orchestrator::ApiSearchArgs* /*request*/, ::orchestrator::ApiSearchResults* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::orchestrator::ApiSearchArgs,::orchestrator::ApiSearchResults>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Search<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Search<Service > StreamedService;
};

}  // namespace orchestrator


#endif  // GRPC_orchestrator_2eproto__INCLUDED
