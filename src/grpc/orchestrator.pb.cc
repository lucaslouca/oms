// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: orchestrator.proto

#include "orchestrator.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace orchestrator {
template <typename>
PROTOBUF_CONSTEXPR ApiVertex::ApiVertex(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.value_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ApiVertexDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ApiVertexDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ApiVertexDefaultTypeInternal() {}
  union {
    ApiVertex _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ApiVertexDefaultTypeInternal _ApiVertex_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ApiEdge::ApiEdge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.from_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.to_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.label_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ApiEdgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ApiEdgeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ApiEdgeDefaultTypeInternal() {}
  union {
    ApiEdge _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ApiEdgeDefaultTypeInternal _ApiEdge_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ApiGraphSummary::ApiGraphSummary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vertex_count_)*/ 0

  , /*decltype(_impl_.edge_count_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ApiGraphSummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ApiGraphSummaryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ApiGraphSummaryDefaultTypeInternal() {}
  union {
    ApiGraphSummary _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ApiGraphSummaryDefaultTypeInternal _ApiGraphSummary_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ApiSearchArgs::ApiSearchArgs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.query_key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.level_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ApiSearchArgsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ApiSearchArgsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ApiSearchArgsDefaultTypeInternal() {}
  union {
    ApiSearchArgs _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ApiSearchArgsDefaultTypeInternal _ApiSearchArgs_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ApiSearchResults::ApiSearchResults(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vertices_)*/{}
  , /*decltype(_impl_.edges_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ApiSearchResultsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ApiSearchResultsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ApiSearchResultsDefaultTypeInternal() {}
  union {
    ApiSearchResults _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ApiSearchResultsDefaultTypeInternal _ApiSearchResults_default_instance_;
}  // namespace orchestrator
static ::_pb::Metadata file_level_metadata_orchestrator_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_orchestrator_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_orchestrator_2eproto = nullptr;
const ::uint32_t TableStruct_orchestrator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::orchestrator::ApiVertex, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::orchestrator::ApiVertex, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::orchestrator::ApiVertex, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::orchestrator::ApiEdge, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::orchestrator::ApiEdge, _impl_.from_),
    PROTOBUF_FIELD_OFFSET(::orchestrator::ApiEdge, _impl_.to_),
    PROTOBUF_FIELD_OFFSET(::orchestrator::ApiEdge, _impl_.label_),
    PROTOBUF_FIELD_OFFSET(::orchestrator::ApiEdge, _impl_.key_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::orchestrator::ApiGraphSummary, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::orchestrator::ApiGraphSummary, _impl_.vertex_count_),
    PROTOBUF_FIELD_OFFSET(::orchestrator::ApiGraphSummary, _impl_.edge_count_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::orchestrator::ApiSearchArgs, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::orchestrator::ApiSearchArgs, _impl_.query_key_),
    PROTOBUF_FIELD_OFFSET(::orchestrator::ApiSearchArgs, _impl_.level_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::orchestrator::ApiSearchResults, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::orchestrator::ApiSearchResults, _impl_.vertices_),
    PROTOBUF_FIELD_OFFSET(::orchestrator::ApiSearchResults, _impl_.edges_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::orchestrator::ApiVertex)},
        { 10, -1, -1, sizeof(::orchestrator::ApiEdge)},
        { 22, -1, -1, sizeof(::orchestrator::ApiGraphSummary)},
        { 32, -1, -1, sizeof(::orchestrator::ApiSearchArgs)},
        { 42, -1, -1, sizeof(::orchestrator::ApiSearchResults)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::orchestrator::_ApiVertex_default_instance_._instance,
    &::orchestrator::_ApiEdge_default_instance_._instance,
    &::orchestrator::_ApiGraphSummary_default_instance_._instance,
    &::orchestrator::_ApiSearchArgs_default_instance_._instance,
    &::orchestrator::_ApiSearchResults_default_instance_._instance,
};
const char descriptor_table_protodef_orchestrator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\022orchestrator.proto\022\014orchestrator\032\033goog"
    "le/protobuf/empty.proto\"\'\n\tApiVertex\022\013\n\003"
    "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\?\n\007ApiEdge\022\014\n\004f"
    "rom\030\001 \001(\t\022\n\n\002to\030\002 \001(\t\022\r\n\005label\030\003 \001(\t\022\013\n\003"
    "key\030\004 \001(\t\";\n\017ApiGraphSummary\022\024\n\014vertex_c"
    "ount\030\001 \001(\005\022\022\n\nedge_count\030\002 \001(\005\"1\n\rApiSea"
    "rchArgs\022\021\n\tquery_key\030\001 \001(\t\022\r\n\005level\030\002 \001("
    "\005\"c\n\020ApiSearchResults\022)\n\010vertices\030\001 \003(\0132"
    "\027.orchestrator.ApiVertex\022$\n\005edges\030\002 \003(\0132"
    "\025.orchestrator.ApiEdge2\371\002\n\014Orchestrator\022"
    "G\n\tAddVertex\022\027.orchestrator.ApiVertex\032\035."
    "orchestrator.ApiGraphSummary\"\000(\001\022J\n\014Dele"
    "teVertex\022\027.orchestrator.ApiVertex\032\035.orch"
    "estrator.ApiGraphSummary\"\000(\001\022C\n\007AddEdge\022"
    "\025.orchestrator.ApiEdge\032\035.orchestrator.Ap"
    "iGraphSummary\"\000(\001\022F\n\nDeleteEdge\022\025.orches"
    "trator.ApiEdge\032\035.orchestrator.ApiGraphSu"
    "mmary\"\000(\001\022G\n\006Search\022\033.orchestrator.ApiSe"
    "archArgs\032\036.orchestrator.ApiSearchResults"
    "\"\000b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_orchestrator_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::absl::once_flag descriptor_table_orchestrator_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_orchestrator_2eproto = {
    false,
    false,
    770,
    descriptor_table_protodef_orchestrator_2eproto,
    "orchestrator.proto",
    &descriptor_table_orchestrator_2eproto_once,
    descriptor_table_orchestrator_2eproto_deps,
    1,
    5,
    schemas,
    file_default_instances,
    TableStruct_orchestrator_2eproto::offsets,
    file_level_metadata_orchestrator_2eproto,
    file_level_enum_descriptors_orchestrator_2eproto,
    file_level_service_descriptors_orchestrator_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_orchestrator_2eproto_getter() {
  return &descriptor_table_orchestrator_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_orchestrator_2eproto(&descriptor_table_orchestrator_2eproto);
namespace orchestrator {
// ===================================================================

class ApiVertex::_Internal {
 public:
};

ApiVertex::ApiVertex(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:orchestrator.ApiVertex)
}
ApiVertex::ApiVertex(const ApiVertex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ApiVertex* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_) {}

    , decltype(_impl_.value_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:orchestrator.ApiVertex)
}

inline void ApiVertex::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.key_) {}

    , decltype(_impl_.value_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ApiVertex::~ApiVertex() {
  // @@protoc_insertion_point(destructor:orchestrator.ApiVertex)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ApiVertex::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void ApiVertex::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ApiVertex::Clear() {
// @@protoc_insertion_point(message_clear_start:orchestrator.ApiVertex)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApiVertex::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "orchestrator.ApiVertex.key"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "orchestrator.ApiVertex.value"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ApiVertex::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:orchestrator.ApiVertex)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "orchestrator.ApiVertex.key");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    const std::string& _s = this->_internal_value();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "orchestrator.ApiVertex.value");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orchestrator.ApiVertex)
  return target;
}

::size_t ApiVertex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:orchestrator.ApiVertex)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_key());
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApiVertex::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ApiVertex::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApiVertex::GetClassData() const { return &_class_data_; }


void ApiVertex::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ApiVertex*>(&to_msg);
  auto& from = static_cast<const ApiVertex&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:orchestrator.ApiVertex)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApiVertex::CopyFrom(const ApiVertex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:orchestrator.ApiVertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApiVertex::IsInitialized() const {
  return true;
}

void ApiVertex::InternalSwap(ApiVertex* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, lhs_arena,
                                       &other->_impl_.key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, lhs_arena,
                                       &other->_impl_.value_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApiVertex::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orchestrator_2eproto_getter, &descriptor_table_orchestrator_2eproto_once,
      file_level_metadata_orchestrator_2eproto[0]);
}
// ===================================================================

class ApiEdge::_Internal {
 public:
};

ApiEdge::ApiEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:orchestrator.ApiEdge)
}
ApiEdge::ApiEdge(const ApiEdge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ApiEdge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.from_) {}

    , decltype(_impl_.to_) {}

    , decltype(_impl_.label_) {}

    , decltype(_impl_.key_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.from_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from().empty()) {
    _this->_impl_.from_.Set(from._internal_from(), _this->GetArenaForAllocation());
  }
  _impl_.to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.to_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to().empty()) {
    _this->_impl_.to_.Set(from._internal_to(), _this->GetArenaForAllocation());
  }
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.label_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label().empty()) {
    _this->_impl_.label_.Set(from._internal_label(), _this->GetArenaForAllocation());
  }
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:orchestrator.ApiEdge)
}

inline void ApiEdge::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.from_) {}

    , decltype(_impl_.to_) {}

    , decltype(_impl_.label_) {}

    , decltype(_impl_.key_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.from_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.to_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.label_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ApiEdge::~ApiEdge() {
  // @@protoc_insertion_point(destructor:orchestrator.ApiEdge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ApiEdge::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.from_.Destroy();
  _impl_.to_.Destroy();
  _impl_.label_.Destroy();
  _impl_.key_.Destroy();
}

void ApiEdge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ApiEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:orchestrator.ApiEdge)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.from_.ClearToEmpty();
  _impl_.to_.ClearToEmpty();
  _impl_.label_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApiEdge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "orchestrator.ApiEdge.from"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "orchestrator.ApiEdge.to"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string label = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "orchestrator.ApiEdge.label"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "orchestrator.ApiEdge.key"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ApiEdge::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:orchestrator.ApiEdge)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string from = 1;
  if (!this->_internal_from().empty()) {
    const std::string& _s = this->_internal_from();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "orchestrator.ApiEdge.from");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string to = 2;
  if (!this->_internal_to().empty()) {
    const std::string& _s = this->_internal_to();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "orchestrator.ApiEdge.to");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string label = 3;
  if (!this->_internal_label().empty()) {
    const std::string& _s = this->_internal_label();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "orchestrator.ApiEdge.label");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string key = 4;
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "orchestrator.ApiEdge.key");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orchestrator.ApiEdge)
  return target;
}

::size_t ApiEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:orchestrator.ApiEdge)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string from = 1;
  if (!this->_internal_from().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_from());
  }

  // string to = 2;
  if (!this->_internal_to().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_to());
  }

  // string label = 3;
  if (!this->_internal_label().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_label());
  }

  // string key = 4;
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApiEdge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ApiEdge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApiEdge::GetClassData() const { return &_class_data_; }


void ApiEdge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ApiEdge*>(&to_msg);
  auto& from = static_cast<const ApiEdge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:orchestrator.ApiEdge)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_from().empty()) {
    _this->_internal_set_from(from._internal_from());
  }
  if (!from._internal_to().empty()) {
    _this->_internal_set_to(from._internal_to());
  }
  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApiEdge::CopyFrom(const ApiEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:orchestrator.ApiEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApiEdge::IsInitialized() const {
  return true;
}

void ApiEdge::InternalSwap(ApiEdge* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.from_, lhs_arena,
                                       &other->_impl_.from_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.to_, lhs_arena,
                                       &other->_impl_.to_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.label_, lhs_arena,
                                       &other->_impl_.label_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, lhs_arena,
                                       &other->_impl_.key_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApiEdge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orchestrator_2eproto_getter, &descriptor_table_orchestrator_2eproto_once,
      file_level_metadata_orchestrator_2eproto[1]);
}
// ===================================================================

class ApiGraphSummary::_Internal {
 public:
};

ApiGraphSummary::ApiGraphSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:orchestrator.ApiGraphSummary)
}
ApiGraphSummary::ApiGraphSummary(const ApiGraphSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:orchestrator.ApiGraphSummary)
}

inline void ApiGraphSummary::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.vertex_count_) { 0 }

    , decltype(_impl_.edge_count_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ApiGraphSummary::~ApiGraphSummary() {
  // @@protoc_insertion_point(destructor:orchestrator.ApiGraphSummary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ApiGraphSummary::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ApiGraphSummary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ApiGraphSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:orchestrator.ApiGraphSummary)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vertex_count_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.edge_count_) -
      reinterpret_cast<char*>(&_impl_.vertex_count_)) + sizeof(_impl_.edge_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApiGraphSummary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 vertex_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.vertex_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 edge_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.edge_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ApiGraphSummary::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:orchestrator.ApiGraphSummary)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vertex_count = 1;
  if (this->_internal_vertex_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_vertex_count(), target);
  }

  // int32 edge_count = 2;
  if (this->_internal_edge_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_edge_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orchestrator.ApiGraphSummary)
  return target;
}

::size_t ApiGraphSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:orchestrator.ApiGraphSummary)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 vertex_count = 1;
  if (this->_internal_vertex_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_vertex_count());
  }

  // int32 edge_count = 2;
  if (this->_internal_edge_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_edge_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApiGraphSummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ApiGraphSummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApiGraphSummary::GetClassData() const { return &_class_data_; }


void ApiGraphSummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ApiGraphSummary*>(&to_msg);
  auto& from = static_cast<const ApiGraphSummary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:orchestrator.ApiGraphSummary)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vertex_count() != 0) {
    _this->_internal_set_vertex_count(from._internal_vertex_count());
  }
  if (from._internal_edge_count() != 0) {
    _this->_internal_set_edge_count(from._internal_edge_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApiGraphSummary::CopyFrom(const ApiGraphSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:orchestrator.ApiGraphSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApiGraphSummary::IsInitialized() const {
  return true;
}

void ApiGraphSummary::InternalSwap(ApiGraphSummary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApiGraphSummary, _impl_.edge_count_)
      + sizeof(ApiGraphSummary::_impl_.edge_count_)
      - PROTOBUF_FIELD_OFFSET(ApiGraphSummary, _impl_.vertex_count_)>(
          reinterpret_cast<char*>(&_impl_.vertex_count_),
          reinterpret_cast<char*>(&other->_impl_.vertex_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApiGraphSummary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orchestrator_2eproto_getter, &descriptor_table_orchestrator_2eproto_once,
      file_level_metadata_orchestrator_2eproto[2]);
}
// ===================================================================

class ApiSearchArgs::_Internal {
 public:
};

ApiSearchArgs::ApiSearchArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:orchestrator.ApiSearchArgs)
}
ApiSearchArgs::ApiSearchArgs(const ApiSearchArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ApiSearchArgs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.query_key_) {}

    , decltype(_impl_.level_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.query_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.query_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_query_key().empty()) {
    _this->_impl_.query_key_.Set(from._internal_query_key(), _this->GetArenaForAllocation());
  }
  _this->_impl_.level_ = from._impl_.level_;
  // @@protoc_insertion_point(copy_constructor:orchestrator.ApiSearchArgs)
}

inline void ApiSearchArgs::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.query_key_) {}

    , decltype(_impl_.level_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.query_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.query_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ApiSearchArgs::~ApiSearchArgs() {
  // @@protoc_insertion_point(destructor:orchestrator.ApiSearchArgs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ApiSearchArgs::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.query_key_.Destroy();
}

void ApiSearchArgs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ApiSearchArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:orchestrator.ApiSearchArgs)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.query_key_.ClearToEmpty();
  _impl_.level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApiSearchArgs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string query_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_query_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "orchestrator.ApiSearchArgs.query_key"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ApiSearchArgs::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:orchestrator.ApiSearchArgs)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string query_key = 1;
  if (!this->_internal_query_key().empty()) {
    const std::string& _s = this->_internal_query_key();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "orchestrator.ApiSearchArgs.query_key");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orchestrator.ApiSearchArgs)
  return target;
}

::size_t ApiSearchArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:orchestrator.ApiSearchArgs)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query_key = 1;
  if (!this->_internal_query_key().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_query_key());
  }

  // int32 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApiSearchArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ApiSearchArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApiSearchArgs::GetClassData() const { return &_class_data_; }


void ApiSearchArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ApiSearchArgs*>(&to_msg);
  auto& from = static_cast<const ApiSearchArgs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:orchestrator.ApiSearchArgs)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_query_key().empty()) {
    _this->_internal_set_query_key(from._internal_query_key());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApiSearchArgs::CopyFrom(const ApiSearchArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:orchestrator.ApiSearchArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApiSearchArgs::IsInitialized() const {
  return true;
}

void ApiSearchArgs::InternalSwap(ApiSearchArgs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.query_key_, lhs_arena,
                                       &other->_impl_.query_key_, rhs_arena);

  swap(_impl_.level_, other->_impl_.level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApiSearchArgs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orchestrator_2eproto_getter, &descriptor_table_orchestrator_2eproto_once,
      file_level_metadata_orchestrator_2eproto[3]);
}
// ===================================================================

class ApiSearchResults::_Internal {
 public:
};

ApiSearchResults::ApiSearchResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:orchestrator.ApiSearchResults)
}
ApiSearchResults::ApiSearchResults(const ApiSearchResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ApiSearchResults* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vertices_){from._impl_.vertices_}
    , decltype(_impl_.edges_){from._impl_.edges_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:orchestrator.ApiSearchResults)
}

inline void ApiSearchResults::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.vertices_){arena}
    , decltype(_impl_.edges_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ApiSearchResults::~ApiSearchResults() {
  // @@protoc_insertion_point(destructor:orchestrator.ApiSearchResults)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ApiSearchResults::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_vertices()->~RepeatedPtrField();
  _internal_mutable_edges()->~RepeatedPtrField();
}

void ApiSearchResults::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ApiSearchResults::Clear() {
// @@protoc_insertion_point(message_clear_start:orchestrator.ApiSearchResults)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_vertices()->Clear();
  _internal_mutable_edges()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApiSearchResults::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .orchestrator.ApiVertex vertices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .orchestrator.ApiEdge edges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ApiSearchResults::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:orchestrator.ApiSearchResults)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .orchestrator.ApiVertex vertices = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vertices_size()); i < n; i++) {
    const auto& repfield = this->_internal_vertices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .orchestrator.ApiEdge edges = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_edges_size()); i < n; i++) {
    const auto& repfield = this->_internal_edges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orchestrator.ApiSearchResults)
  return target;
}

::size_t ApiSearchResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:orchestrator.ApiSearchResults)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .orchestrator.ApiVertex vertices = 1;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->_internal_vertices()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .orchestrator.ApiEdge edges = 2;
  total_size += 1UL * this->_internal_edges_size();
  for (const auto& msg : this->_internal_edges()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApiSearchResults::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ApiSearchResults::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApiSearchResults::GetClassData() const { return &_class_data_; }


void ApiSearchResults::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ApiSearchResults*>(&to_msg);
  auto& from = static_cast<const ApiSearchResults&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:orchestrator.ApiSearchResults)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_vertices()->MergeFrom(from._internal_vertices());
  _this->_internal_mutable_edges()->MergeFrom(from._internal_edges());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApiSearchResults::CopyFrom(const ApiSearchResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:orchestrator.ApiSearchResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApiSearchResults::IsInitialized() const {
  return true;
}

void ApiSearchResults::InternalSwap(ApiSearchResults* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_vertices()->InternalSwap(other->_internal_mutable_vertices());
  _internal_mutable_edges()->InternalSwap(other->_internal_mutable_edges());
}

::PROTOBUF_NAMESPACE_ID::Metadata ApiSearchResults::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orchestrator_2eproto_getter, &descriptor_table_orchestrator_2eproto_once,
      file_level_metadata_orchestrator_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace orchestrator
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::orchestrator::ApiVertex*
Arena::CreateMaybeMessage< ::orchestrator::ApiVertex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orchestrator::ApiVertex >(arena);
}
template<> PROTOBUF_NOINLINE ::orchestrator::ApiEdge*
Arena::CreateMaybeMessage< ::orchestrator::ApiEdge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orchestrator::ApiEdge >(arena);
}
template<> PROTOBUF_NOINLINE ::orchestrator::ApiGraphSummary*
Arena::CreateMaybeMessage< ::orchestrator::ApiGraphSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orchestrator::ApiGraphSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::orchestrator::ApiSearchArgs*
Arena::CreateMaybeMessage< ::orchestrator::ApiSearchArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orchestrator::ApiSearchArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::orchestrator::ApiSearchResults*
Arena::CreateMaybeMessage< ::orchestrator::ApiSearchResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orchestrator::ApiSearchResults >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
