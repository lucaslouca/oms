// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: orchestrator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_orchestrator_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_orchestrator_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/empty.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_orchestrator_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_orchestrator_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_orchestrator_2eproto;
namespace orchestrator {
class ApiEdge;
struct ApiEdgeDefaultTypeInternal;
extern ApiEdgeDefaultTypeInternal _ApiEdge_default_instance_;
class ApiGraphSummary;
struct ApiGraphSummaryDefaultTypeInternal;
extern ApiGraphSummaryDefaultTypeInternal _ApiGraphSummary_default_instance_;
class ApiSearchArgs;
struct ApiSearchArgsDefaultTypeInternal;
extern ApiSearchArgsDefaultTypeInternal _ApiSearchArgs_default_instance_;
class ApiSearchResults;
struct ApiSearchResultsDefaultTypeInternal;
extern ApiSearchResultsDefaultTypeInternal _ApiSearchResults_default_instance_;
class ApiVertex;
struct ApiVertexDefaultTypeInternal;
extern ApiVertexDefaultTypeInternal _ApiVertex_default_instance_;
}  // namespace orchestrator
PROTOBUF_NAMESPACE_OPEN
template <>
::orchestrator::ApiEdge* Arena::CreateMaybeMessage<::orchestrator::ApiEdge>(Arena*);
template <>
::orchestrator::ApiGraphSummary* Arena::CreateMaybeMessage<::orchestrator::ApiGraphSummary>(Arena*);
template <>
::orchestrator::ApiSearchArgs* Arena::CreateMaybeMessage<::orchestrator::ApiSearchArgs>(Arena*);
template <>
::orchestrator::ApiSearchResults* Arena::CreateMaybeMessage<::orchestrator::ApiSearchResults>(Arena*);
template <>
::orchestrator::ApiVertex* Arena::CreateMaybeMessage<::orchestrator::ApiVertex>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace orchestrator {

// ===================================================================


// -------------------------------------------------------------------

class ApiVertex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orchestrator.ApiVertex) */ {
 public:
  inline ApiVertex() : ApiVertex(nullptr) {}
  ~ApiVertex() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ApiVertex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApiVertex(const ApiVertex& from);
  ApiVertex(ApiVertex&& from) noexcept
    : ApiVertex() {
    *this = ::std::move(from);
  }

  inline ApiVertex& operator=(const ApiVertex& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApiVertex& operator=(ApiVertex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ApiVertex& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApiVertex* internal_default_instance() {
    return reinterpret_cast<const ApiVertex*>(
               &_ApiVertex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ApiVertex& a, ApiVertex& b) {
    a.Swap(&b);
  }
  inline void Swap(ApiVertex* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApiVertex* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ApiVertex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ApiVertex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ApiVertex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ApiVertex& from) {
    ApiVertex::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApiVertex* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "orchestrator.ApiVertex";
  }
  protected:
  explicit ApiVertex(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key() ;
  const std::string& key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* ptr);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // string value = 2;
  void clear_value() ;
  const std::string& value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* ptr);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:orchestrator.ApiVertex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orchestrator_2eproto;
};// -------------------------------------------------------------------

class ApiEdge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orchestrator.ApiEdge) */ {
 public:
  inline ApiEdge() : ApiEdge(nullptr) {}
  ~ApiEdge() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ApiEdge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApiEdge(const ApiEdge& from);
  ApiEdge(ApiEdge&& from) noexcept
    : ApiEdge() {
    *this = ::std::move(from);
  }

  inline ApiEdge& operator=(const ApiEdge& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApiEdge& operator=(ApiEdge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ApiEdge& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApiEdge* internal_default_instance() {
    return reinterpret_cast<const ApiEdge*>(
               &_ApiEdge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ApiEdge& a, ApiEdge& b) {
    a.Swap(&b);
  }
  inline void Swap(ApiEdge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApiEdge* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ApiEdge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ApiEdge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ApiEdge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ApiEdge& from) {
    ApiEdge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApiEdge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "orchestrator.ApiEdge";
  }
  protected:
  explicit ApiEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kLabelFieldNumber = 3,
    kKeyFieldNumber = 4,
  };
  // string from = 1;
  void clear_from() ;
  const std::string& from() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_from(Arg_&& arg, Args_... args);
  std::string* mutable_from();
  PROTOBUF_NODISCARD std::string* release_from();
  void set_allocated_from(std::string* ptr);

  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(
      const std::string& value);
  std::string* _internal_mutable_from();

  public:
  // string to = 2;
  void clear_to() ;
  const std::string& to() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_to(Arg_&& arg, Args_... args);
  std::string* mutable_to();
  PROTOBUF_NODISCARD std::string* release_to();
  void set_allocated_to(std::string* ptr);

  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(
      const std::string& value);
  std::string* _internal_mutable_to();

  public:
  // string label = 3;
  void clear_label() ;
  const std::string& label() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_label(Arg_&& arg, Args_... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* ptr);

  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(
      const std::string& value);
  std::string* _internal_mutable_label();

  public:
  // string key = 4;
  void clear_key() ;
  const std::string& key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* ptr);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // @@protoc_insertion_point(class_scope:orchestrator.ApiEdge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orchestrator_2eproto;
};// -------------------------------------------------------------------

class ApiGraphSummary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orchestrator.ApiGraphSummary) */ {
 public:
  inline ApiGraphSummary() : ApiGraphSummary(nullptr) {}
  ~ApiGraphSummary() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ApiGraphSummary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApiGraphSummary(const ApiGraphSummary& from);
  ApiGraphSummary(ApiGraphSummary&& from) noexcept
    : ApiGraphSummary() {
    *this = ::std::move(from);
  }

  inline ApiGraphSummary& operator=(const ApiGraphSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApiGraphSummary& operator=(ApiGraphSummary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ApiGraphSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApiGraphSummary* internal_default_instance() {
    return reinterpret_cast<const ApiGraphSummary*>(
               &_ApiGraphSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ApiGraphSummary& a, ApiGraphSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(ApiGraphSummary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApiGraphSummary* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ApiGraphSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ApiGraphSummary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ApiGraphSummary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ApiGraphSummary& from) {
    ApiGraphSummary::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApiGraphSummary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "orchestrator.ApiGraphSummary";
  }
  protected:
  explicit ApiGraphSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVertexCountFieldNumber = 1,
    kEdgeCountFieldNumber = 2,
  };
  // int32 vertex_count = 1;
  void clear_vertex_count() ;
  ::int32_t vertex_count() const;
  void set_vertex_count(::int32_t value);

  private:
  ::int32_t _internal_vertex_count() const;
  void _internal_set_vertex_count(::int32_t value);

  public:
  // int32 edge_count = 2;
  void clear_edge_count() ;
  ::int32_t edge_count() const;
  void set_edge_count(::int32_t value);

  private:
  ::int32_t _internal_edge_count() const;
  void _internal_set_edge_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:orchestrator.ApiGraphSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t vertex_count_;
    ::int32_t edge_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orchestrator_2eproto;
};// -------------------------------------------------------------------

class ApiSearchArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orchestrator.ApiSearchArgs) */ {
 public:
  inline ApiSearchArgs() : ApiSearchArgs(nullptr) {}
  ~ApiSearchArgs() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ApiSearchArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApiSearchArgs(const ApiSearchArgs& from);
  ApiSearchArgs(ApiSearchArgs&& from) noexcept
    : ApiSearchArgs() {
    *this = ::std::move(from);
  }

  inline ApiSearchArgs& operator=(const ApiSearchArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApiSearchArgs& operator=(ApiSearchArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ApiSearchArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApiSearchArgs* internal_default_instance() {
    return reinterpret_cast<const ApiSearchArgs*>(
               &_ApiSearchArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ApiSearchArgs& a, ApiSearchArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(ApiSearchArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApiSearchArgs* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ApiSearchArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ApiSearchArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ApiSearchArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ApiSearchArgs& from) {
    ApiSearchArgs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApiSearchArgs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "orchestrator.ApiSearchArgs";
  }
  protected:
  explicit ApiSearchArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryKeyFieldNumber = 1,
    kLevelFieldNumber = 2,
  };
  // string query_key = 1;
  void clear_query_key() ;
  const std::string& query_key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_query_key(Arg_&& arg, Args_... args);
  std::string* mutable_query_key();
  PROTOBUF_NODISCARD std::string* release_query_key();
  void set_allocated_query_key(std::string* ptr);

  private:
  const std::string& _internal_query_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query_key(
      const std::string& value);
  std::string* _internal_mutable_query_key();

  public:
  // int32 level = 2;
  void clear_level() ;
  ::int32_t level() const;
  void set_level(::int32_t value);

  private:
  ::int32_t _internal_level() const;
  void _internal_set_level(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:orchestrator.ApiSearchArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_key_;
    ::int32_t level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orchestrator_2eproto;
};// -------------------------------------------------------------------

class ApiSearchResults final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orchestrator.ApiSearchResults) */ {
 public:
  inline ApiSearchResults() : ApiSearchResults(nullptr) {}
  ~ApiSearchResults() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ApiSearchResults(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApiSearchResults(const ApiSearchResults& from);
  ApiSearchResults(ApiSearchResults&& from) noexcept
    : ApiSearchResults() {
    *this = ::std::move(from);
  }

  inline ApiSearchResults& operator=(const ApiSearchResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApiSearchResults& operator=(ApiSearchResults&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ApiSearchResults& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApiSearchResults* internal_default_instance() {
    return reinterpret_cast<const ApiSearchResults*>(
               &_ApiSearchResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ApiSearchResults& a, ApiSearchResults& b) {
    a.Swap(&b);
  }
  inline void Swap(ApiSearchResults* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApiSearchResults* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ApiSearchResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ApiSearchResults>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ApiSearchResults& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ApiSearchResults& from) {
    ApiSearchResults::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApiSearchResults* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "orchestrator.ApiSearchResults";
  }
  protected:
  explicit ApiSearchResults(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
    kEdgesFieldNumber = 2,
  };
  // repeated .orchestrator.ApiVertex vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;

  public:
  void clear_vertices() ;
  ::orchestrator::ApiVertex* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orchestrator::ApiVertex >*
      mutable_vertices();
  private:
  const ::orchestrator::ApiVertex& _internal_vertices(int index) const;
  ::orchestrator::ApiVertex* _internal_add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::orchestrator::ApiVertex>& _internal_vertices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::orchestrator::ApiVertex>* _internal_mutable_vertices();
  public:
  const ::orchestrator::ApiVertex& vertices(int index) const;
  ::orchestrator::ApiVertex* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orchestrator::ApiVertex >&
      vertices() const;
  // repeated .orchestrator.ApiEdge edges = 2;
  int edges_size() const;
  private:
  int _internal_edges_size() const;

  public:
  void clear_edges() ;
  ::orchestrator::ApiEdge* mutable_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orchestrator::ApiEdge >*
      mutable_edges();
  private:
  const ::orchestrator::ApiEdge& _internal_edges(int index) const;
  ::orchestrator::ApiEdge* _internal_add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::orchestrator::ApiEdge>& _internal_edges() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::orchestrator::ApiEdge>* _internal_mutable_edges();
  public:
  const ::orchestrator::ApiEdge& edges(int index) const;
  ::orchestrator::ApiEdge* add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orchestrator::ApiEdge >&
      edges() const;
  // @@protoc_insertion_point(class_scope:orchestrator.ApiSearchResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orchestrator::ApiVertex > vertices_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orchestrator::ApiEdge > edges_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orchestrator_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ApiVertex

// string key = 1;
inline void ApiVertex::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& ApiVertex::key() const {
  // @@protoc_insertion_point(field_get:orchestrator.ApiVertex.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ApiVertex::set_key(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orchestrator.ApiVertex.key)
}
inline std::string* ApiVertex::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:orchestrator.ApiVertex.key)
  return _s;
}
inline const std::string& ApiVertex::_internal_key() const {
  return _impl_.key_.Get();
}
inline void ApiVertex::_internal_set_key(const std::string& value) {
  ;


  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* ApiVertex::_internal_mutable_key() {
  ;
  return _impl_.key_.Mutable( GetArenaForAllocation());
}
inline std::string* ApiVertex::release_key() {
  // @@protoc_insertion_point(field_release:orchestrator.ApiVertex.key)
  return _impl_.key_.Release();
}
inline void ApiVertex::set_allocated_key(std::string* value) {
  _impl_.key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orchestrator.ApiVertex.key)
}

// string value = 2;
inline void ApiVertex::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& ApiVertex::value() const {
  // @@protoc_insertion_point(field_get:orchestrator.ApiVertex.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ApiVertex::set_value(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orchestrator.ApiVertex.value)
}
inline std::string* ApiVertex::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:orchestrator.ApiVertex.value)
  return _s;
}
inline const std::string& ApiVertex::_internal_value() const {
  return _impl_.value_.Get();
}
inline void ApiVertex::_internal_set_value(const std::string& value) {
  ;


  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* ApiVertex::_internal_mutable_value() {
  ;
  return _impl_.value_.Mutable( GetArenaForAllocation());
}
inline std::string* ApiVertex::release_value() {
  // @@protoc_insertion_point(field_release:orchestrator.ApiVertex.value)
  return _impl_.value_.Release();
}
inline void ApiVertex::set_allocated_value(std::string* value) {
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orchestrator.ApiVertex.value)
}

// -------------------------------------------------------------------

// ApiEdge

// string from = 1;
inline void ApiEdge::clear_from() {
  _impl_.from_.ClearToEmpty();
}
inline const std::string& ApiEdge::from() const {
  // @@protoc_insertion_point(field_get:orchestrator.ApiEdge.from)
  return _internal_from();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ApiEdge::set_from(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.from_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orchestrator.ApiEdge.from)
}
inline std::string* ApiEdge::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:orchestrator.ApiEdge.from)
  return _s;
}
inline const std::string& ApiEdge::_internal_from() const {
  return _impl_.from_.Get();
}
inline void ApiEdge::_internal_set_from(const std::string& value) {
  ;


  _impl_.from_.Set(value, GetArenaForAllocation());
}
inline std::string* ApiEdge::_internal_mutable_from() {
  ;
  return _impl_.from_.Mutable( GetArenaForAllocation());
}
inline std::string* ApiEdge::release_from() {
  // @@protoc_insertion_point(field_release:orchestrator.ApiEdge.from)
  return _impl_.from_.Release();
}
inline void ApiEdge::set_allocated_from(std::string* value) {
  _impl_.from_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.from_.IsDefault()) {
          _impl_.from_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orchestrator.ApiEdge.from)
}

// string to = 2;
inline void ApiEdge::clear_to() {
  _impl_.to_.ClearToEmpty();
}
inline const std::string& ApiEdge::to() const {
  // @@protoc_insertion_point(field_get:orchestrator.ApiEdge.to)
  return _internal_to();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ApiEdge::set_to(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.to_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orchestrator.ApiEdge.to)
}
inline std::string* ApiEdge::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:orchestrator.ApiEdge.to)
  return _s;
}
inline const std::string& ApiEdge::_internal_to() const {
  return _impl_.to_.Get();
}
inline void ApiEdge::_internal_set_to(const std::string& value) {
  ;


  _impl_.to_.Set(value, GetArenaForAllocation());
}
inline std::string* ApiEdge::_internal_mutable_to() {
  ;
  return _impl_.to_.Mutable( GetArenaForAllocation());
}
inline std::string* ApiEdge::release_to() {
  // @@protoc_insertion_point(field_release:orchestrator.ApiEdge.to)
  return _impl_.to_.Release();
}
inline void ApiEdge::set_allocated_to(std::string* value) {
  _impl_.to_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.to_.IsDefault()) {
          _impl_.to_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orchestrator.ApiEdge.to)
}

// string label = 3;
inline void ApiEdge::clear_label() {
  _impl_.label_.ClearToEmpty();
}
inline const std::string& ApiEdge::label() const {
  // @@protoc_insertion_point(field_get:orchestrator.ApiEdge.label)
  return _internal_label();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ApiEdge::set_label(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.label_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orchestrator.ApiEdge.label)
}
inline std::string* ApiEdge::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:orchestrator.ApiEdge.label)
  return _s;
}
inline const std::string& ApiEdge::_internal_label() const {
  return _impl_.label_.Get();
}
inline void ApiEdge::_internal_set_label(const std::string& value) {
  ;


  _impl_.label_.Set(value, GetArenaForAllocation());
}
inline std::string* ApiEdge::_internal_mutable_label() {
  ;
  return _impl_.label_.Mutable( GetArenaForAllocation());
}
inline std::string* ApiEdge::release_label() {
  // @@protoc_insertion_point(field_release:orchestrator.ApiEdge.label)
  return _impl_.label_.Release();
}
inline void ApiEdge::set_allocated_label(std::string* value) {
  _impl_.label_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.label_.IsDefault()) {
          _impl_.label_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orchestrator.ApiEdge.label)
}

// string key = 4;
inline void ApiEdge::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& ApiEdge::key() const {
  // @@protoc_insertion_point(field_get:orchestrator.ApiEdge.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ApiEdge::set_key(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orchestrator.ApiEdge.key)
}
inline std::string* ApiEdge::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:orchestrator.ApiEdge.key)
  return _s;
}
inline const std::string& ApiEdge::_internal_key() const {
  return _impl_.key_.Get();
}
inline void ApiEdge::_internal_set_key(const std::string& value) {
  ;


  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* ApiEdge::_internal_mutable_key() {
  ;
  return _impl_.key_.Mutable( GetArenaForAllocation());
}
inline std::string* ApiEdge::release_key() {
  // @@protoc_insertion_point(field_release:orchestrator.ApiEdge.key)
  return _impl_.key_.Release();
}
inline void ApiEdge::set_allocated_key(std::string* value) {
  _impl_.key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orchestrator.ApiEdge.key)
}

// -------------------------------------------------------------------

// ApiGraphSummary

// int32 vertex_count = 1;
inline void ApiGraphSummary::clear_vertex_count() {
  _impl_.vertex_count_ = 0;
}
inline ::int32_t ApiGraphSummary::vertex_count() const {
  // @@protoc_insertion_point(field_get:orchestrator.ApiGraphSummary.vertex_count)
  return _internal_vertex_count();
}
inline void ApiGraphSummary::set_vertex_count(::int32_t value) {
  _internal_set_vertex_count(value);
  // @@protoc_insertion_point(field_set:orchestrator.ApiGraphSummary.vertex_count)
}
inline ::int32_t ApiGraphSummary::_internal_vertex_count() const {
  return _impl_.vertex_count_;
}
inline void ApiGraphSummary::_internal_set_vertex_count(::int32_t value) {
  ;
  _impl_.vertex_count_ = value;
}

// int32 edge_count = 2;
inline void ApiGraphSummary::clear_edge_count() {
  _impl_.edge_count_ = 0;
}
inline ::int32_t ApiGraphSummary::edge_count() const {
  // @@protoc_insertion_point(field_get:orchestrator.ApiGraphSummary.edge_count)
  return _internal_edge_count();
}
inline void ApiGraphSummary::set_edge_count(::int32_t value) {
  _internal_set_edge_count(value);
  // @@protoc_insertion_point(field_set:orchestrator.ApiGraphSummary.edge_count)
}
inline ::int32_t ApiGraphSummary::_internal_edge_count() const {
  return _impl_.edge_count_;
}
inline void ApiGraphSummary::_internal_set_edge_count(::int32_t value) {
  ;
  _impl_.edge_count_ = value;
}

// -------------------------------------------------------------------

// ApiSearchArgs

// string query_key = 1;
inline void ApiSearchArgs::clear_query_key() {
  _impl_.query_key_.ClearToEmpty();
}
inline const std::string& ApiSearchArgs::query_key() const {
  // @@protoc_insertion_point(field_get:orchestrator.ApiSearchArgs.query_key)
  return _internal_query_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ApiSearchArgs::set_query_key(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.query_key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orchestrator.ApiSearchArgs.query_key)
}
inline std::string* ApiSearchArgs::mutable_query_key() {
  std::string* _s = _internal_mutable_query_key();
  // @@protoc_insertion_point(field_mutable:orchestrator.ApiSearchArgs.query_key)
  return _s;
}
inline const std::string& ApiSearchArgs::_internal_query_key() const {
  return _impl_.query_key_.Get();
}
inline void ApiSearchArgs::_internal_set_query_key(const std::string& value) {
  ;


  _impl_.query_key_.Set(value, GetArenaForAllocation());
}
inline std::string* ApiSearchArgs::_internal_mutable_query_key() {
  ;
  return _impl_.query_key_.Mutable( GetArenaForAllocation());
}
inline std::string* ApiSearchArgs::release_query_key() {
  // @@protoc_insertion_point(field_release:orchestrator.ApiSearchArgs.query_key)
  return _impl_.query_key_.Release();
}
inline void ApiSearchArgs::set_allocated_query_key(std::string* value) {
  _impl_.query_key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.query_key_.IsDefault()) {
          _impl_.query_key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orchestrator.ApiSearchArgs.query_key)
}

// int32 level = 2;
inline void ApiSearchArgs::clear_level() {
  _impl_.level_ = 0;
}
inline ::int32_t ApiSearchArgs::level() const {
  // @@protoc_insertion_point(field_get:orchestrator.ApiSearchArgs.level)
  return _internal_level();
}
inline void ApiSearchArgs::set_level(::int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:orchestrator.ApiSearchArgs.level)
}
inline ::int32_t ApiSearchArgs::_internal_level() const {
  return _impl_.level_;
}
inline void ApiSearchArgs::_internal_set_level(::int32_t value) {
  ;
  _impl_.level_ = value;
}

// -------------------------------------------------------------------

// ApiSearchResults

// repeated .orchestrator.ApiVertex vertices = 1;
inline int ApiSearchResults::_internal_vertices_size() const {
  return _impl_.vertices_.size();
}
inline int ApiSearchResults::vertices_size() const {
  return _internal_vertices_size();
}
inline void ApiSearchResults::clear_vertices() {
  _internal_mutable_vertices()->Clear();
}
inline ::orchestrator::ApiVertex* ApiSearchResults::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:orchestrator.ApiSearchResults.vertices)
  return _internal_mutable_vertices()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orchestrator::ApiVertex >*
ApiSearchResults::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:orchestrator.ApiSearchResults.vertices)
  return _internal_mutable_vertices();
}
inline const ::orchestrator::ApiVertex& ApiSearchResults::_internal_vertices(int index) const {
  return _internal_vertices().Get(index);
}
inline const ::orchestrator::ApiVertex& ApiSearchResults::vertices(int index) const {
  // @@protoc_insertion_point(field_get:orchestrator.ApiSearchResults.vertices)
  return _internal_vertices(index);
}
inline ::orchestrator::ApiVertex* ApiSearchResults::_internal_add_vertices() {
  return _internal_mutable_vertices()->Add();
}
inline ::orchestrator::ApiVertex* ApiSearchResults::add_vertices() {
  ::orchestrator::ApiVertex* _add = _internal_add_vertices();
  // @@protoc_insertion_point(field_add:orchestrator.ApiSearchResults.vertices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orchestrator::ApiVertex >&
ApiSearchResults::vertices() const {
  // @@protoc_insertion_point(field_list:orchestrator.ApiSearchResults.vertices)
  return _internal_vertices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::orchestrator::ApiVertex>&
ApiSearchResults::_internal_vertices() const {
  return _impl_.vertices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::orchestrator::ApiVertex>*
ApiSearchResults::_internal_mutable_vertices() {
  return &_impl_.vertices_;
}

// repeated .orchestrator.ApiEdge edges = 2;
inline int ApiSearchResults::_internal_edges_size() const {
  return _impl_.edges_.size();
}
inline int ApiSearchResults::edges_size() const {
  return _internal_edges_size();
}
inline void ApiSearchResults::clear_edges() {
  _internal_mutable_edges()->Clear();
}
inline ::orchestrator::ApiEdge* ApiSearchResults::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:orchestrator.ApiSearchResults.edges)
  return _internal_mutable_edges()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orchestrator::ApiEdge >*
ApiSearchResults::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:orchestrator.ApiSearchResults.edges)
  return _internal_mutable_edges();
}
inline const ::orchestrator::ApiEdge& ApiSearchResults::_internal_edges(int index) const {
  return _internal_edges().Get(index);
}
inline const ::orchestrator::ApiEdge& ApiSearchResults::edges(int index) const {
  // @@protoc_insertion_point(field_get:orchestrator.ApiSearchResults.edges)
  return _internal_edges(index);
}
inline ::orchestrator::ApiEdge* ApiSearchResults::_internal_add_edges() {
  return _internal_mutable_edges()->Add();
}
inline ::orchestrator::ApiEdge* ApiSearchResults::add_edges() {
  ::orchestrator::ApiEdge* _add = _internal_add_edges();
  // @@protoc_insertion_point(field_add:orchestrator.ApiSearchResults.edges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orchestrator::ApiEdge >&
ApiSearchResults::edges() const {
  // @@protoc_insertion_point(field_list:orchestrator.ApiSearchResults.edges)
  return _internal_edges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::orchestrator::ApiEdge>&
ApiSearchResults::_internal_edges() const {
  return _impl_.edges_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::orchestrator::ApiEdge>*
ApiSearchResults::_internal_mutable_edges() {
  return &_impl_.edges_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace orchestrator


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_orchestrator_2eproto_2epb_2eh
